<!DOCTYPE HTML>
<html>
<head>
<title>UrlDownloadToFile</title>
<meta name="description" content="在此免费的脚本语言中使用 UrlDownloadToFile 下载任意类型的文件. 例如 UrlDownloadToFile, http://www.anyorg.org/File.htm, c:\File.htm">
<meta http-equiv="Content-Type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>UrlDownloadToFile</h1>

<p>从互联网下载文件.</p>

<pre class="Syntax">UrlDownloadToFile, URL, Filename</pre>
<h3>参数</h3>
<dl>

  <dt>URL</dt>
  <dd><p>要下载的文件的 URL. 例如, http://someorg.org 也许会获取那个组织的欢迎页面.</p></dd>

  <dt>Filename</dt>
  <dd><p><strong>下载到文件</strong>: 指定要在本地创建的文件名, 如果未指定绝对路径则假定在 <a href="../Variables.htm#WorkingDir">%A_WorkingDir%</a>. 任何现有的文件会被新文件 <strong>覆盖</strong>.</p>
    <p><strong>下载到变量</strong>:请参阅后面的<a href="#WHR">示例</a>.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span> 此命令失败时会抛出异常. 想了解更多信息, 请参阅 <a href="Catch.htm#RuntimeErrors">运行时错误</a>.</p>
<p>如果遇到问题则 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 被置为 1, 否则为 0.</p>
<h3>备注</h3>
<p>甚至在远程文件不存在时, 下载也可能显示成功. 这是因为许多网络服务器会发送错误页面代替缺失的文件. 这个错误页面会代替 <em>Filename</em> 被保存起来.</p>
<p>必须安装 Internet Explorer 3 或更高版本, 此功能才有效. 防火墙或存在多个网络适配器可能导致此功能失败. 此外, 一些网站可能拦截这样的下载.</p>
<p><strong>缓存</strong>:</p>
<ul>
  <li>在 v1.0.44.07+, 直接从远程服务器中获取 URL 表示的文件 (即决不从 Internet Explorer 的缓存中获取). 要允许使用缓存,请在 URL 前加上 *0 和空格；例如:<code>*0 http://someorg.org</code>.在星号后面的零可以替换为任何有效的 dwFlags 数字; 要了解详情, 请在 <a href="http://www.microsoft.com">www.microsoft.com</a> 中搜索 InternetOpenUrl.</li>
  <li>在比 1.0.44.07 早的版本中, 每当可能时都会从缓存中获取文件. 要避免这种情况, 请在 URL 的末尾指定查询字符串. 例如:<code>http://www.someorg.org/doc.html?fakeParam=42</code>.注:如果您频繁的下载同一个文件,那么查询字符串应该进行改变.</li>
</ul>
<p><strong>代理</strong>: 如果在微软的 Internet Explorer 设置中配置了代理服务器, 那么 UrlDownloadToFile 会使用它访问 Internet.</p>
<p><strong>FTP 和 Gopher</strong>: v1.0.48.04+ 支持 FTP 和 Gopher URL. 例如:</p>
<pre>UrlDownloadToFile, ftp://example.com/home/My File.zip, C:\My Folder\My File.zip  <em>; 匿名登录.</em>
UrlDownloadToFile, ftp://user:pass@example.com:21/home/My File.zip, C:\My Folder\My File.zip  <em>; 以指定的用户登录.</em>
UrlDownloadToFile, ftp://user:pass@example.com/My Directory, C:\Dir Listing.html  <em>; 获取 HTML 格式的目录列表.</em></pre>
<h3>相关</h3>
<p><a href="FileRead.htm">FileRead</a>, <a href="FileCopy.htm">FileCopy</a></p>
<h3>示例</h3>
<pre class="NoIndent">UrlDownloadToFile, https://autohotkey.com/download/1.1/version.txt, C:\AutoHotkey Latest Version.txt
UrlDownloadToFile, http://someorg.org/archive.zip, C:\SomeOrg's Archive.zip</pre>
<pre id="WHR" class="NoIndent"><em>; 示例:下载文本到变量:</em>
whr := ComObjCreate("WinHttp.WinHttpRequest.5.1")
whr.Open("GET", "https://autohotkey.com/download/1.1/version.txt", true)
whr.Send()
<em>; Using 'true' above and the call below allows the script to remain responsive.</em>
whr.WaitForResponse()
version := whr.ResponseText
MsgBox % version
</pre>
<pre id="XHR" class="NoIndent"><em>; Example: Make an asynchronous HTTP request.</em>

req := ComObjCreate("Msxml2.XMLHTTP")
<em>; Open a request with async enabled.</em>
req.open("GET", "https://autohotkey.com/download/1.1/version.txt", true)
<em>; Set our callback function (v1.1.17+).</em>
req.onreadystatechange := Func("Ready")
<em>; Send the request.  Ready() will be called when it's complete.</em>
req.send()
<em>/*
; If you're going to wait, there's no need for onreadystatechange.
; Setting async=true and waiting like this allows the script to remain
; responsive while the download is taking place, whereas async=false
; will make the script unresponsive.
while req.readyState != 4
    sleep 100
*/</em>
#Persistent

Ready() {
    global req
    if (req.readyState != 4)  ; Not done yet.
        return
    if (req.status == 200 || req.status == 304) ; OK.
        MsgBox % "Latest AutoHotkey version: " req.responseText
    else
        MsgBox 16,, % "Status " req.status
    ExitApp
}</pre>

</body>
</html>
