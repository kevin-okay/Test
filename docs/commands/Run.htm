<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Run / RunWait</title>
<meta http-equiv="Content-Type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<style type="text/css">
<!--
.style3 {color: #FF0000; font-weight: bold; }
-->
</style>
</head>
<body>

<h1>Run / RunWait</h1>

<p>运行外部程序。与 Run 不同, RunWait 会等待程序结束
才继续往后执行.</p>

<pre class="Syntax">Run, Target [, WorkingDir, Max|Min|Hide|UseErrorLevel, OutputVarPID]</pre>
<h3>参数</h3>
<dl>

  <dt>Target</dt>
  <dd><p>要运行的文档, URL, 可执行文件 (.exe, .com, .bat, 等等), 快捷方式 (.lnk) 或 <a href="#verbs">系统动词</a> (请参阅备注). 如果 <em>Target</em> 是本地文件且指定时没有包含路径, 则首先搜索 <a href="../Variables.htm#WorkingDir">A_WorkingDir</a>. 如果那里没有找到匹配的文件, 如果它是集成的 ("已知") 则系统会搜索并运行此文件, 例如包含在 PATH 环境变量的其中某个文件夹中.</p>
      <p>要传递参数, 请让它们紧跟在程序或文档名的后面. 如果参数包含空格, 则把它们括在双引号中是最可靠的 (虽然它在某些情况下没有括在双引号中也能工作).</p></dd>

  <dt>WorkingDir</dt>
  <dd><p>用于运行项目的工作目录. 即使它包含空格, 也不要括在双引号中. 如果省略, 则使用脚本自己的工作目录 (<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>).</p></dd>

  <dt>Max|Min|Hide<br>
      UseErrorLevel</dt>
  <dd><p>如果省略, 则正常运行 <em>Target</em> . 或者, 它可以包含一个或多个这些单词:</p>
      <p><strong>Max</strong>: 最大化运行</p>
      <p><strong>Min</strong>: 最小化运行</p>
      <p><strong>Hide</strong>: 隐藏运行 (不能和上面任意一个选项组合使用)</p>
      <p>备注: 一些程序 (例如 Calc.exe) 不会遵循请求的启动状态, 因此对于它们 Max/Min/Hide 没有效果.</p>
      <p><strong><a name="UseErrorLevel"></a>UseErrorLevel</strong>: 可以单独指定 UseErrorLevel 或和上面的其中一个单词组合使用 (把它和其他单词用空格分隔). 如果运行失败, 则使用此选项会跳过警告对话框, 设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 为单词 ERROR, 并让 <a href="../misc/Threads.htm">当前线程</a> 继续执行. 如果运行成功, 则 RunWait 会把 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 设置为程序的退出代码, 而 Run 把它设置为 0.</p>
      <p><a name="LastError"></a>指定 UseErrorLevel 时, 变量 <strong>A_LastError</strong> 被设置为操作系统 GetLastError() 函数返回的结果. A_LastError 是一个介于 0 和 4294967295 之间的数字 (总是为十进制而非十六进制). 零 (0) 意味着成功, 但其他任何数字意味着运行失败. 每个数字对应一种特定的错误状态 (要获取整个列表, 请在 <a href="http://www.microsoft.com">www.microsoft.com</a> 中搜索 "system error codes"). 像 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 一样，A_LastError 是与每个线程关联的设置，即由其他<a href="../misc/Threads.htm">线程</a>产生的中断不会改变它。然而, A_LastError 还可由 <a href="DllCall.htm#LastError">DllCall</a> 设置.</p></dd>

  <dt>OutputVarPID</dt>
  <dd><p>变量名, 用来存储新运行程序的唯一 <a href="Process.htm">进程 ID (PID)</a>. 如果无法确定则 PID 被设置为空, 这经常发生在运行系统动词, 文档或快捷方式而不是直接的可执行文件时. RunWait 也支持此参数, 不过它获取的 <em>OuputVarPID</em> 必须在 <a href="../misc/Threads.htm">另一个线程</a> 中进行检查 (否则, 这个 PID 将是无效的, 因为 RunWait 后的代码执行时相应的进程已经终止了).</p>
      <p>在 Run 命令获取 PID, 此进程要创建的窗口可能还不存在. 要等待它至少创建一个窗口，请使用 <code><a href="WinWait.htm">WinWait</a> ahk_pid %OutputVarPID%</code>。</p></dd>

</dl>
<h3>ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span> 此命令失败时会抛出异常. 想了解更多信息, 请参阅 <a href="Catch.htm#RuntimeErrors">运行时错误</a>.</p>
<p>Run: 只有在使用了 UseErrorLevel 时才会设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>, 在这种情况下失败时 ErrorLevel 被设置为单词 ERROR 而成功时为 0.</p>
<p>RunWait: 设置 ErrorLevel 为程序的退出代码 (32 位的有符号整数). 如果使用了 UseErrorLevel 且运行失败, 则把它设置为单词 ERROR.</p>
<h3>备注</h3>
<p>与 Run 不同, RunWait 会等待 <em>Target</em> 关闭或退出, 此时 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 被设置为程序的退出代码 (32 位的有符号整数). 一些程序即使它们仍在运行但看起来立即返回了; 这些程序启动了另外的进程.</p>
<p>如果 <em>Target</em> 包含逗号, 则必须对它们进行 <a href="_EscapeChar.htm">转义</a>, 如同下面例子中的三次演示:</p>
<pre>Run rundll32.exe shell32.dll<span class="style3">`,</span>Control_RunDLL desk.cpl<span class="style3">`,`,</span> 3  <em>; 打开控制面板 &gt; 显示属性 &gt; 设置</em></pre>
<p>通过 <a href="../Variables.htm#ComSpec">Comspec</a> (cmd.exe) 运行程序时 (也许由于您需要重定向程序的输入和输出), 如果可执行程序的路径或名称包含空格, 则整个字符串必须括在一对外部的引号中. 在下面的例子中, 外部引号显示为红色, 而内部所有的引号显示为黑色:</p>
<pre>Run %comspec% /c <span class="style3">"</span>"C:\My Utility.exe" "param 1" "second param" &gt;"C:\My File.txt"<span class="style3">"</span></pre>
<p>如果无法启动<em>目标</em>，将显示包含此错误信息的窗口，并结束当前线程，除非在第3个参数中指定字符串<strong>UseErrorLevel</strong>，或者使用<a href="Try.htm">Try</a>/<a href="Catch.htm">Catch</a>语句进行捕获。</p>
<p>当 <em>Target</em> 为准确路径时可轻微提升性能，例如使用 <code>Run, C:\Windows\Notepad.exe "C:\My Documents\Test.txt"</code> 代替 <code>Run, C:\My Documents\Test.txt</code>。</p>
<p>Run 还可以打开特殊的 <a href="../misc/CLSID-List.htm">CLSID 文件夹</a>. 例如：</p>
<pre>Run ::{20d04fe0-3aea-1069-a2d8-08002b30309d}  <em>; 打开 "我的电脑" 文件夹.</em>
Run ::{645ff040-5081-101b-9f08-00aa002f954e}  <em>; 打开回收站.</em></pre>
<p id="verbs">系统动词对应于资源管理器中文件右键菜单的可用操作. 如果启动文件时没有指定动词, 则使用那种文件类型的默认动词 (通常为 "打开"). 如果指定了, 则动词后应该跟着默认文件名. 目前支持下列动词:</p>
<table class="info">
  <tr>
    <td width="8%">*<i>动词</i></td>
    <td width="92%"><span class="ver">[AHK_L 57+]:</span> 任何系统定义或自定义的动词. 例如： <code>Run *Compile %A_ScriptFullPath%</code><br>在 Windows Vista 和更高版本中，可以使用 <code>*RunAs</code> 动词代替<i>以管理员身份运行</i>右键菜单。</td>
  </tr>
  <tr>
    <td>properties（属性）</td>
    <td>显示指定文件的资源管理器属性窗口. 例如：<code>Run, properties "C:\My File.txt"</code><br>
    注: 当脚本终止时属性窗口会自动关闭. 要避免这种情况, 请使用 <a href="WinWait.htm">WinWait</a> 等待窗口出现, 然后使用 <a href="WinWaitClose.htm">WinWaitClose</a> 等待用户关闭它。</td>
  </tr>
  <tr>
    <td>find（查找）</td>
    <td>在指定的文件夹中打开资源管理器的搜索助理或查找文件窗口实例. 例如: <code>Run, find D:\</code></td>
  </tr>
  <tr>
    <td>explore（浏览）</td>
    <td>打开指定文件夹的资源管理器实例. 例如：<code>Run, explore %A_ProgramFiles%</code>。</td>
  </tr>
  <tr>
    <td>edit（编辑）</td>
    <td>打开指定的文件进行编辑. 如果指定的文件类型没有关联 "edit" 动作时, 它不起作用. 例如: <code>Run, edit "C:\My File.txt"</code></td>
  </tr>
  <tr>
    <td>open</td>
    <td>打开指定的文件 (一般不需要, 因为这对于大多数文件类型是默认的动作). 例如：<code>Run, open "My File.txt"</code>。</td>
  </tr>
  <tr>
    <td>print</td>
    <td>使用关联的应用程序打印指定的文件，如果有。例如: <code>Run, print "My File.txt"</code></td>
  </tr>
</table>
<p>当 RunWait 处于等待状态时, 可以通过 <a href="../Hotkeys.htm">热键</a>, <a href="Menu.htm">自定义菜单项</a> 或 <a href="SetTimer.htm">计时器</a> 启动新的 <a href="../misc/Threads.htm">线程</a>.</p>
<h3>相关</h3>
<p><a href="RunAs.htm">RunAs</a>, <a href="Process.htm">Process</a>, <a href="Exit.htm">Exit</a>, <a href="../misc/CLSID-List.htm">CLSID 列表</a>, <a href="DllCall.htm">DllCall</a></p>
<h3>示例</h3>
<pre class="NoIndent">Run, Notepad.exe, C:\My Documents, max

Run, mailto:someone@domain.com?subject=This is the subject line&amp;body=This is the message body's text.
Run, ReadMe.doc, , Max UseErrorLevel  <em>; 最大化运行, 且在失败时不显示对话框.</em>
if ErrorLevel = ERROR
    MsgBox The document could not be launched.

RunWait, %comspec% /c dir c:\ &gt;&gt;c:\DirTest.txt, , min
Run, c:\DirTest.txt
Run, properties c:\DirTest.txt

Run, http://www.google.com <em>; 即可以运行任意网址。</em>
Run, mailto:someone@somedomain.com  <em>; 这样应该会打开默认的电子邮件程序。</em>

Run ::{20d04fe0-3aea-1069-a2d8-08002b30309d}  <em>; 打开“我的电脑”文件夹。</em>
Run ::{645ff040-5081-101b-9f08-00aa002f954e}  <em>; 打开回收站。</em>

<em>; 要连续执行多个命令，请在命令间使用“&amp;&amp;”分隔：</em>
Run, %comspec% /c dir /b &gt; C:\list.txt &amp;&amp; type C:\list.txt &amp;&amp; pause
</pre>

<pre class="NoIndent" id="StdOut">
<em>; 以下可用于运行命令并获取其的输出：</em>
MsgBox % RunWaitOne("dir " A_ScriptDir)

<em>; ...或一次执行多条命令并获取其输出：</em>
MsgBox % RunWaitMany("
(
echo 在这填入命令，
echo 会执行所有命令，
echo 并获取输出。
)")

RunWaitOne(command) {
    <em>; WshShell 对象： <a href="http://msdn.microsoft.com/en-us/library/aew9yb99">http://msdn.microsoft.com/en-us/library/aew9yb99</a></em>
    shell := ComObjCreate("WScript.Shell")
    <em>; 通过 cmd.exe 执行单条命令</em>
    exec := shell.Exec(ComSpec " /C " command)
    <em>; 读取并返回命令的输出</em>
    return exec.StdOut.ReadAll()
}

RunWaitMany(commands) {
    shell := ComObjCreate("WScript.Shell")
    <em>; 打开 cmd.exe 禁用命令显示</em>
    exec := shell.Exec(ComSpec " /Q /K echo off")
    <em>; 发送并执行命令，使用新行分隔</em>
    exec.StdIn.WriteLine(commands "`nexit")  <em>; 保证执行完毕后退出!</em>
    <em>; 读取并返回所有命令的输出</em>
    return exec.StdOut.ReadAll()
}
</pre>

<pre class="NoIndent" id="ExecScript">
<em>; ExecScript: 在新的 AutoHotkey 进程中执行给定的代码.</em>
ExecScript(Script, Wait:=true)
{
    shell := ComObjCreate("WScript.Shell")
    exec := shell.Exec("AutoHotkey.exe /ErrorStdOut *")
    exec.StdIn.Write(script)
    exec.StdIn.Close()
    if Wait
        return exec.StdOut.ReadAll()
}

<em>; 示例:</em>
InputBox expr,, 输入一个表达式，将用一个新的脚本来计算.,,,,,,,, Asc("*")
result := ExecScript("FileAppend % (" expr "), *")
MsgBox % "Result: " result
</pre>

</body>
</html>
