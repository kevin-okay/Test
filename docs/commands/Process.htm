<!DOCTYPE HTML>
<html>
<head>
<title>Process</title>
<meta http-equiv="content-type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Process</h1>

<p>对进程执行下列的其中一个操作:检查进程是否存在；改变进程的优先级；关闭进程；等待进程关闭.</p>

<pre class="Syntax">Process, Cmd, PID-or-Name [, Param3]</pre>
<h3>参数</h3>
<dl>

  <dt>Cmd</dt>
  <dd><p>下列单词的其中一个:</p>
    <p><strong>Exist</strong>: 如果存在一个匹配的进程则设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 为此进程 ID (PID), 否则为 0. 如果 <em>PID-or-Name</em> 参数为空, 则获取脚本自身的 PID. 获取脚本的 PID 的另一种单行的方法是 <code>PID := DllCall("GetCurrentProcessId")</code>.</p>
    <p><strong>Close</strong>: 如果成功终止一个匹配的进程, 则设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 为此进程原来的进程 ID (PID). 否则 (没有找到匹配的进程或在终止匹配进程的过程中出现了问题) 它被设置为 0. 因为进程会被突然终止 (可能在一个关键点中断它的工作或导致窗口中未保存数据的丢失), 因此只有当无法使用 <a href="WinClose.htm">WinClose</a> 作用于它的窗口来关闭相应进程时才应该使用这种方法.</p>
    <p><strong>List</strong>: 尽管还不支持 <em>List</em>, 但 <a href="#ListEx">示例部分</a> 中的例子演示了通过 DllCall 获取进程列表的方法.</p>
    <p id="Priority"><strong>Priority</strong>: 改变首个匹配进程的优先级 (如同 Windows 任务管理器中看到的那样) 为 <em>Param3</em> 同时设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 为它的进程 ID (PID). 如果 <em>PID-or-Name</em> 参数为空, 则改变脚本自己的优先级. 如果没有找到匹配的进程或在改变匹配进程的优先级过程中出现了问题, 则 ErrorLevel 被设置为 0.</p>
    <p><em>Param3</em> 应该为下列字母或单词的其中一个: L (或 Low), B (或 BelowNormal), N (或 Normal), A (或 AboveNormal), H (或 High), R (或 Realtime). 注: 任何不是设计为 Realtime 优先级运行的进程如果设置为这个优先级可能会降低系统的稳定性.</p>
    <p><strong>Wait</strong>: 在 <em>Param3</em> 指定的秒数 (可以为小数) 中检查是否存在匹配的进程. 如果省略 <em>Param3</em>, 则此命令会无限期等待. 如果找到了匹配的进程, 则 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 被设置为它的进程 ID (PID). 如果命令超时了, 则 ErrorLevel 被置为 0.</p>
    <p><strong>WaitClose</strong>: 在 <em>Param3</em> 指定的秒数 (可以为小数) 中检查所有匹配的进程是否关闭. 如果省略 <em>Param3</em>, 则此命令会无限期等待. 如果所有的匹配进程都关闭了, 则 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 被置为 0. 如果命令超时了, 则 ErrorLevel 被设置为仍然存在的首个匹配进程的进程 ID (PID).</p></dd>

  <dt>PID-or-Name</dt>
  <dd><p>此参数可以为数字 (PID) 或下面描述的进程名称. 它还可以被留空来改变脚本自己的优先级.</p>
      <p>PID: 进程 ID, 唯一标识一个特定进程的数字 (只有在此进程的生存期这个数字才有意义). 新运行的进程的 PID 可以通过 <a href="Run.htm">Run</a> 命令获取. 同样的, 窗口的 PID 可以通过 <a href="WinGet.htm">WinGet</a> 获取. Process 命令自身也可以获取 PID.</p>
      <p>Name: 进程的名称, 通常和它的可执行文件名相同 (不带路径), 例如 notepad.exe 或 winword.exe. 一个名称可能匹配多个正在运行的进程, 但只会对第一个进程进行操作. 这个名称不区分大小写.</p></dd>

  <dt>Param3</dt>
  <dd><p>请参阅上面的 <em>Cmd</em> 了解详情.</p></dd>

</dl>

<h3>ErrorLevel</h3>
<p>请参阅上面的 <em>Cmd</em> 了解详情.</p>
<h3>备注</h3>
<p>对于 <em>Wait</em> 和 <em>WaitClose</em>: 会每隔 100 毫秒检查目标进程一次; 当目标进程满足条件时, 命令不再继续等待. 换句话说,这时不会等待超时时间到期,而是像上面描述的那样立即设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a>,然后继续往后执行脚本.此外, 当此命令处于等待状态时, 可以通过 <a href="../Hotkeys.htm">热键</a>, <a href="Menu.htm">自定义菜单项</a> 或 <a href="SetTimer.htm">计时器</a> 启动新的 <a href="../misc/Threads.htm">线程</a>.</p>

<h3>相关</h3>
<p><a href="Run.htm">Run</a>, <a href="WinGet.htm">WinGet</a>, <a href="WinClose.htm">WinClose</a>, <a href="WinKill.htm">WinKill</a>, <a href="WinWait.htm">WinWait</a>, <a href="WinWaitClose.htm">WinWaitClose</a>, <a href="WinExist.htm">IfWinExist</a></p>
<h3>示例</h3>
<pre class="NoIndent"><em>; 示例 #1:</em>

Run Notepad.exe, , , NewPID
Process, priority, %NewPID%, High
MsgBox The newly launched notepad's PID is %NewPID%.</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; 示例 #2:</em>

Process, wait, Notepad.exe, 5.5
NewPID = %ErrorLevel%  <em>; 由于 ErrorLevel 会经常发生改变, 所以要立即保存这个值.</em>
if NewPID = 0
{
    MsgBox The specified process did not appear within 5.5 seconds.
    return
}
<em>; 否则:</em>
MsgBox A matching process has appeared (Process ID is %NewPID%).
Process, priority, %NewPID%, Low
Process, priority, , High  <em>; 把脚本自己设置为高优先级.</em>
WinClose Untitled - Notepad
Process, WaitClose, %NewPID%, 5
if ErrorLevel <em>; PID 仍然存在.</em>
    MsgBox The process did not close within 5 seconds.</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; 示例 #3: 一个改变活动窗口进程优先级的热键:</em>

#z:: <em>; Win+Z hotkey</em>
WinGet, active_pid, PID, A
WinGetTitle, active_title, A
Gui, 5:Add, Text,, Press ESCAPE to cancel, or double-click a new`npriority level for the following window:`n%active_title%
Gui, 5:Add, ListBox, vMyListBox gMyListBox r5, Normal|High|Low|BelowNormal|AboveNormal
Gui, 5:Add, Button, default, OK
Gui, 5:Show,, Set Priority
return

5GuiEscape:
5GuiClose:
Gui, Destroy
return

MyListBox:
if A_GuiEvent &lt;&gt; DoubleClick
    return
<em>; 否则直接进入下一个标签:</em>
5ButtonOK:
GuiControlGet, MyListBox
Gui, Destroy
Process, Priority, %active_pid%, %MyListBox%
if ErrorLevel
    MsgBox Success: Its priority was changed to "%MyListBox%".
else
    MsgBox Error: Its priority could not be changed to "%MyListBox%".
return</pre>
<p>&nbsp;</p>
<pre class="NoIndent" id="ListEx"><em>; 示例 #4: 使用 DllCall 获取正在运行的进程列表然后显示在 MsgBox.</em>

d := "  |  "  <em>; 字符串分隔符</em>
s := 4096  <em>; 缓存和数组的大小 (4 KB)</em>

Process, Exist  <em>; 设置 ErrorLevel 为这个正在运行脚本的 PID</em>
<em>; 使用 PROCESS_QUERY_INFORMATION (0x0400) 获取此脚本的句柄</em>
h := DllCall("OpenProcess", "UInt", 0x0400, "Int", false, "UInt", ErrorLevel, "Ptr")
<em>; 打开此进程的可调整的访问令牌 (TOKEN_ADJUST_PRIVILEGES = 32)</em>
DllCall("Advapi32.dll\OpenProcessToken", "Ptr", h, "UInt", 32, "PtrP", t)
VarSetCapacity(ti, 16, 0)  <em>; 特权结构</em>
NumPut(1, ti, 0, "UInt")  <em>; 特权数组中的一个条目...</em>
<em>; 获取调试特权的本地唯一标识符:</em>
DllCall("Advapi32.dll\LookupPrivilegeValue", "Ptr", 0, "Str", "SeDebugPrivilege", "Int64P", luid)
NumPut(luid, ti, 4, "Int64")
NumPut(2, ti, 12, "UInt")  <em>; 启用这个特权: SE_PRIVILEGE_ENABLED = 2</em>
<em>; 使用新的访问令牌更新此进程的特权:</em>
r := DllCall("Advapi32.dll\AdjustTokenPrivileges", "Ptr", t, "Int", false, "Ptr", &amp;ti, "UInt", 0, "Ptr", 0, "Ptr", 0)
DllCall("CloseHandle", "Ptr", t)  <em>; 关闭此访问令牌句柄以节约内存</em>
DllCall("CloseHandle", "Ptr", h)  <em>; 关闭此进程句柄以节约内存</em>

hModule := DllCall("LoadLibrary", "Str", "Psapi.dll")  <em>; 通过预加载来提升性能</em>
s := VarSetCapacity(a, s)  <em>; 接收进程列表标识符的数组:</em>
c := 0  <em>; 用于进程标识符的计数器</em>
DllCall("Psapi.dll\EnumProcesses", "Ptr", &amp;a, "UInt", s, "UIntP", r)
Loop, % r // 4  <em>; 把数组解析为 DWORD (32 位) 的标识符:</em>
{
   id := NumGet(a, A_Index * 4, "UInt")
   <em>; 打开进程: PROCESS_VM_READ (0x0010) | PROCESS_QUERY_INFORMATION (0x0400)</em>
   h := DllCall("OpenProcess", "UInt", 0x0010 | 0x0400, "Int", false, "UInt", id, "Ptr")
   if !h
      continue
   VarSetCapacity(n, s, 0)  <em>; 接收模块基础名称的缓存:</em>
   e := DllCall("Psapi.dll\GetModuleBaseName", "Ptr", h, "Ptr", 0, "Str", n, "UInt", A_IsUnicode ? s//2 : s)
   if !e    <em>; 用于 64 位进程在 32 位模式时的回退方法:</em>
      if e := DllCall("Psapi.dll\GetProcessImageFileName", "Ptr", h, "Str", n, "UInt", A_IsUnicode ? s//2 : s)
         SplitPath n, n
   DllCall("CloseHandle", "Ptr", h)  <em>; 关闭进程句柄以节约内存</em>
   if (n &amp;&amp; e)  <em>; 如果映像不是空的, 则添加到列表:</em>
      l .= n . d, c++
}
DllCall("FreeLibrary", "Ptr", hModule)  <em>; 卸载库来释放内存</em>
<em>;Sort, l, C  ; 取消注释这行来按字母顺序对列表进行排序</em>
MsgBox, 0, %c% Processes, %l%</pre>
<p>&nbsp;</p>
<pre class="NoIndent" id="ListCom"><em>; 示例 #5: 使用 COM 获取正在运行的进程列表.</em>

Gui, Add, ListView, x2 y0 w400 h500, Process Name|Command Line
for process in ComObjGet("winmgmts:").ExecQuery("Select * from Win32_Process")
    LV_Add("", process.Name, process.CommandLine)
Gui, Show,, Process List

<em>; Win32_Process: <a href="http://msdn.microsoft.com/en-us/library/aa394372.aspx">http://msdn.microsoft.com/en-us/library/aa394372.aspx</a></em>
</pre>

</body>
</html>
