<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Random</title>
<meta http-equiv="content-type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Random</h1>

<p>生成伪随机数。</p>

<pre class="Syntax">Random, OutputVar [, Min, Max]
Random, , NewSeed</pre>
<h3>参数</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p>用来存储结果的变量名. 存储的浮点数的格式由 <a href="SetFormat.htm">SetFormat</a> 决定.</p></dd>

  <dt>Min</dt>
  <dd>可以生成的最小数字, 可以为负数, 浮点数或 <a href="../Variables.htm#Expressions">表达式</a>. 如果省略, 最小的数字默认为 0. 允许的最小整数值为 -2147483648, 但浮点数没有限制.</dd>

  <dt>Max</dt>
  <dd><p>可以生成的最大数字, 可以为负数, 浮点数或 <a href="../Variables.htm#Expressions">表达式</a>. 如果省略, 最大的数字默认为 2147483647 (这也是允许的最大整数值, 但浮点数没有限制).</p></dd>

  <dt>NewSeed</dt>
  <dd><p>此模式使用 <em>NewSeed</em> 重新设定随机数生成器的种子 (可以为 <a href="../Variables.htm#Expressions">表达式</a>). 这会影响后续生成的所有随机数. <em>NewSeed</em> 应该为介于 0 和 4294967295 (0xFFFFFFFF) 之间的整数. 重新设定种子可以提高随机数的质量/安全性, 尤其当 <em>NewSeed</em> 是真正的随机数而不是质量不佳的伪随机数时. 重新设定种子通常只需要进行一次.</p>
      <p>如果脚本没有重新设定种子, 则使用自 1601 年 1 月 1 日开始 100 纳秒间隔数目的 64 位值的低 32 位作为种子开始. 这个值在 ~7.2 分钟内从 0 变化到 4294967295.</p></dd>

</dl>

<h3>备注</h3>
<p>此命令生成伪随机数, 即一个模拟真正随机数的数字, 但它实际上是通过复杂的公式计算使得判断/猜测下一个数字极为困难的数字.</p>
<p>在指定范围中所有数字被生成的机率几乎是相同的 (然而, 请参阅下面的 "已知限制").</p>
<p>如果 <em>Min</em> 或 <em>Max</em> 其中一个为小数，则最后结果将为由 <a href="SetFormat.htm">SetFormat</a> 设置格式的浮点数。否则，结果为整数。</p>
<p>结果为浮点数的已知限制: 1) 对于任何特殊的范围只能生成大约 4,294,967,296 个截然不同的数字, 所以永远不会生成范围中的其他所有数字; 2) 优势结果可能比指定的 <em>Max</em> 略大一些 (这种情况部分是由浮点数固有的不精确性导致的).</p>
<h3>相关</h3>
<p><a href="SetFormat.htm">SetFormat</a></p>
<h3>示例</h3>
<pre class="NoIndent">Random, rand, 1, 10
Random, rand, 0.0, 1.0</pre>
<h3>基于原始来源的注释</h3>
<P>This function uses the Mersenne Twister random number generator, MT19937, written
  by Takuji Nishimura and Makoto Matsumoto, Shawn Cokus, Matthe Bellew and Isaku
  Wada.</P>
<P>The Mersenne Twister is an algorithm for generating random numbers. It was
  designed with consideration of the flaws in various other generators. The period,
  2<SUP>19937</SUP>-1, and the order of equidistribution, 623 dimensions, are
  far greater. The generator is also fast; it avoids multiplication and division,
  and it benefits from caches and pipelines. For more information see the inventors'
  web page at www.math.keio.ac.jp/~matumoto/emt.html</P>
<P>Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura, All rights
  reserved.</P>
<P>Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:</P>
<OL>
  <LI>Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.</LI>
  <LI>Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.</LI>
  <LI>The names of its contributors may not be used to endorse or promote products
    derived from this software without specific prior written permission.</LI>
</OL>
<P class="J">THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</P>
<P>Do NOT use for CRYPTOGRAPHY without securely hashing several returned values
  together, otherwise the generator state can be learned after reading 624 consecutive
  values.</P>
<P>When you use this, send an email to: matumoto@math.keio.ac.jp with an appropriate
  reference to your work. It would be nice to CC: rjwagner@writeme.com and Cokus@math.washington.edu
  when you write.</P>
<P><I>This above has been already been done for AutoHotkey, but if you use the Random command in a publicly distributed application,
    consider sending an e-mail to the above people to thank them.</I></P>

</body>
</html>
