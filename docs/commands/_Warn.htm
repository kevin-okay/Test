<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>#Warn</title>
<meta http-equiv="Content-Type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>#Warn <span class="ver">[v1.0.95.00+]</span></h1>

<p>启用或禁用可能产生错误的特定状况时的警告，例如书写错误或缺少全局声明。</p>

<pre class="Syntax">#Warn [, WarningType, WarningMode]</pre>

<h3>参数</h3>
<dl>

  <dt>WarningType</dt>
  <dd>
      <p>要启用或禁用的警告类型。如果省略, 默认为 <i>All</i>.</p>
      <p><strong>UseUnsetLocal</strong> 或 <strong>UseUnsetGlobal</strong>：在读取之前没有赋值或使用 <a href="VarSetCapacity.htm">VarSetCapacity</a> 初始化的变量时产生警告。如果这种变量计划为空的，则可以为它赋值空字符串来屏蔽这样的警告。</p>
      <p>根据用于局部和全局变量这种警告被分成两种单独的类型，这是由于全局变量的持久、脚本范围作用域的性质，所以对不首先初始化而使用全局变量更常用。因此，一些脚本作者会希望在局部启用这种警告类型，但禁用全局的。</p>
      <pre>#Warn
<em>;y := ""  ; 这样将屏蔽警告。</em>
x := y    <em>; y 还不含有值。</em></pre>
      <p><strong>UseEnv</strong>：在自动使用环境变量代替空的脚本变量时产生警告。当环境变量名意外地与脚本中使用的某个变量名相同时会发生这种情况。这种警告会在访问变量时会产生，但如果脚本使用了 <a href="_NoEnv.htm">#NoEnv</a>（由于多种原因而推荐使用）则可以避免。</p>
      <pre>#Warn
<em>;#NoEnv             ; 如果“temp”不是计划为环境变量则添加这行。</em>
<em>;EnvGet temp, TEMP  ; 这里将复制环境变量的值到脚本变量中。</em>
temp := ""          <em>; 不考虑这行，temp 仍然含有值。</em>
MsgBox % temp       <em>; 这里访问名称为“TEMP”的环境变量。</em></pre>
      <p><strong>LocalSameAsGlobal</strong>：在脚本开始运行前，为与全局变量名称相同的每个<em>未声明</em>局部变量显示警告。这是用来避免在函数中由于忘记在访问全局变量前进行声明引起的错误。如果变量确实为局部变量，则可以用类似 <code>local x</code> 或 <code>static y</code> 这样的声明来屏蔽这种警告。</p>
      <pre>#Warn
g := 1
ShowG() {       <em>; 即使从未调用这个函数也会显示警告。</em>
    <em>;global g   ; &lt;-- 访问全局变量时需要这行。</em>
    MsgBox % g  <em>; 没有声明，所以“g”是个空的局部变量。</em>
}</pre>
      <p><strong>All</strong>: 应用指定的 <em>WarningMode</em> 支持的所有警告类型.</p>
    </dd>

  <dt>WarningMode</dt>
  <dd>
      <p>表示警告方式的值。如果省略, 默认为 <em>MsgBox</em>.</p>
      <p><strong>MsgBox</strong>：显示描述警告的消息框。注意当这种消息框解除后，脚本将照常继续。</p>
      <p><strong>StdOut</strong> <span class="ver">[v1.1.04+]</span>：把警告的描述以及相应的文件名和行号发送到 <em>stdout</em>（程序的标准输出流）。这样可以让类似 SciTE 的高级编辑器在不干扰脚本的同时捕获警告, 之后用户可以通过编辑器的控制面板跳转到各个出错行.</p>
      <p><strong>OutputDebug</strong>：把警告的描述发送到调试器显示出来。如果没有活动的调试器，则这个值没有效果。想了解更多细节, 请参阅 <a href="OutputDebug.htm">OutputDebug</a>.</p>
      <p><strong>Off</strong>：禁用指定 <em>WarningType</em> 的警告。</p>
    </dd>

</dl>
<h3>备注</h3>
	<p>默认情况下, 所有的警告都是关闭的.</p>
	<p>无法在运行时启用或禁用警告, 这个设置是在脚本加载时确定的. 因此, 它在脚本中的位置是不重要的 (并且与其他的 # 指令一样, #Warn 不能根据条件执行).</p>
	<p>然而, 多个 #Warn 指令的顺序是有意义的: 最近一次设置指定警告的指令决定了这种警告的模式. 所以, 例如下面的两个语句会启用除 UseEnv 之外的所有警告的组合效果:</p>
<pre>#Warn All
#Warn UseEnv, Off

EnvSet EnvVar, 1
x := EnvVar       <em>; 由于没有使用 #NoEnv, 所以这句是正确的.</em>
x := NotAnEnvVar  <em>; 产生警告.</em>
</pre>
<h3>相关</h3>
<p><a href="../Functions.htm#Locals">局部变量和全局变量</a></p>
<h3>示例</h3>
<pre class="NoIndent">
#Warn All, Off                    <em>; 禁用所有警告.  这是默认设置.</em>
#Warn                             <em>; 启用每种警告并将它们显示到消息框中。</em>
#Warn UseUnsetLocal, OutputDebug  <em>; 在赋值前使用局部变量时发送警告到 OutputDebug.</em>
</pre>

</body>
</html>
