<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Finally</title>
<meta http-equiv="Content-Type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Finally <span class="ver">[v1.1.14+]</span></h1>

<p>确保在<a href="Try.htm">try</a>语句后总是会执行的一个或多个语句（命令或表达式）.</p>

<pre class="Syntax">Finally <i>Statement</i></pre>
<pre class="Syntax" style="line-height: 100%">Finally
{
    <i>Statements</i>
}</pre>
<h3>备注</h3>
<p>每次使用 <em>finally</em> 都必须附属于（与之关联）它上面的 <a href="Try.htm">try</a> （或<a href="Catch.htm">catch</a>） 语句. <em>finally</em> 总是附属于它上面且离它最近的无主 <em>try</em> 语句，不过可以使用<a href="Block.htm">区块</a>改变这种行为.</p>
<p><em>Try</em> 语句的行为取决于<em>catch</em> 或 <em>finally</em> 是否存在. 更多细节请参阅 <a href="Try.htm">Try</a>.</p>
<p>不能使用<em>Goto</em>, <em>break</em>, <em>continue</em> 和 <em>return</em> 退出 <em>finally</em> 语句, 因为在 <em>try</em> 区块里需要抑制控制流指令. 例如, 如果 <em>try</em> 语句中使用 <code>return 42</code>, 值 42 将会在 finally 区块执行后被返回. 如果使用上述命令试图退出 <em>finally</em> 区块将会在加载时或运行时检测为错误.</p>
<p>在v1.1.19.02之前的版本中, 存在一个bug, 当 <em>finally</em> 语句存在时, <em>try</em> 里的控制流语句可能不会执行. <em>Return</em> 被错误地允许在 <em>finally</em> 语句中使用, 但是如果有一个异常抛出时它将会被忽略.</p>
<p><a href="Block.htm#otb">One True Brace (OTB)风格</a>可以用于<em>finally</em>命令中.例如：</p>
<pre>try <strong>{</strong>
    ...
<strong>}</strong> finally <strong>{</strong>
    ...
<strong>}</strong>

try <strong>{</strong>
    ...
<strong>}</strong> catch e <strong>{</strong>
    ...
<strong>}</strong> finally <strong>{</strong>
    ...
<strong>}</strong></pre>
<h3>相关</h3>
<p><a href="Try.htm">Try</a>, <a href="Catch.htm">Catch</a>, <a href="Throw.htm">Throw</a>, <a href="Block.htm">区块</a></p>
<h3 id="Examples">示例</h3>
<pre class="NoIndent">try
{
    ToolTip, Working...
    Example1()
}
catch e
{
    <em>; 关于e对象的更多细节，请参阅<a href="Catch.htm">Catch</a>.</em>
    MsgBox, 16,, % &quot;Exception thrown!`n`nwhat: &quot; e.what &quot;`nfile: &quot; e.file
        . &quot;`nline: &quot; e.line &quot;`nmessage: &quot; e.message &quot;`nextra: &quot; e.extra
}
finally
{
    ToolTip <em>; 隐藏工具提示</em>
}

MsgBox, Done!

<em>; 此函数包含了清理代码的Finally区块</em>
Example1()
{
    try
        Example2()
    finally
        MsgBox, This is always executed regardless of exceptions
}

<em>; 当系统分钟数为奇数时执行此函数执行会出错</em>
Example2()
{
    if Mod(A_Min, 2)
        throw Exception(&quot;Test exception&quot;)
    MsgBox, Example2 did not fail
}</pre>

</body>
</html>
