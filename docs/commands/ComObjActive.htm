<!DOCTYPE HTML>
<html>
<head>
<title>ComObjActive()</title>
<meta http-equiv="Content-Type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjActive() <span class="ver">[AHK_L 53+]</span></h1>

<p>检索已注册到 OLE 的正在运行的对象.</p>
<pre class="Syntax">用户COM对象 := ComObjActive(CLSID)</pre>

<p id="param">创建表示作为参数或返回值传递的类型化值的对象.</p>
<pre class="Syntax">参数对象 := ComObj(变量类型, 值 [, 标志])</pre>

<h4 style="margin-top:2em">不建议:</h4>
<p>不推荐以下使用方法,后续版本中可能被替换或不再支持.</p>
<p id="missing">创建在调用 COM 对象的方法时可以用来代替可选参数默认值的对象. 自v1.1.12废弃:使用两个连续的逗号替换,如<code>Obj.Method(1,,3)</code></p>
<pre class="Syntax">参数对象 := ComObjMissing()</pre>

<p id="enwrap">装包或拆包位于可用对象的原始<a href="http://msdn.microsoft.com/en-us/library/dd318520.aspx">IDispatch</a>指针,并自动调用AddRef(增加引用).</p>
<pre class="Syntax">用户COM对象 := ComObjEnwrap(DispPtr)	;装包
DispPtr := ComObjUnwrap(用户COM对象)	;拆包</pre>
<p>使用以下方式,使代码更可靠:</p>
<pre>用户COM对象 := ComObject(9, DispPtr, 1), ObjAddRef(DispPtr)
DispPtr := <a href="ComObjValue.htm">ComObjValue</a>(用户COM对象), ObjAddRef(DispPtr)</pre>

<h3>参数</h3>
<dl>

  <dt>CLSID</dt>
  <dd><p>要检索的 COM 对象的 CLSID 或可读 Prog ID.</p></dd>

  <dt>用户COM对象</dt>
  <dd><p>可以使用 <a href="../Objects.htm#Usage_Objects">对象语法</a> 的 COM 对象.</p></dd>

  <dt>变量类型</dt>
  <dd><p>表示值类型的整数.类型列表见<a href="ComObjType.htm#vt">ComObjType()</a>.</p></dd>

  <dt>值</dt>
  <dd><p>要包装的值. 当前仅支持整数值和指针值.</p></dd>

  <dt>标志</dt>
  <dd><p>影响此函数和包装器对象行为的标志,请参阅后面.</p></dd>

  <dt>DispPtr</dt>
  <dd><p>原始的 IDispatch 指针.</p></dd>

</dl>

<h3 id="Flags">标志</h3>
<table class="info">
  <tr>
    <td>&nbsp;0&nbsp;</td>
    <td>
      <p>默认行为. <a href="http://msdn.microsoft.com/en-us/library/ms691379.aspx">AddRef</a> is called automatically for IUnknown and IDispatch pointers, so the caller should use <a href="ObjAddRef.htm">ObjRelease</a> to release their copy of the pointer if appropriate.</p>
      <p>未来版本中可能改变此默认行为,因此建议当包装接口指针时总是设置<em>标志</em>为<code>1</code>,需要时再调用<a href="ObjAddRef.htm">ObjAddRef()</a>.</p>
    </td>
  </tr>
  <tr>
    <td>&nbsp;1&nbsp;</td>
    <td>取得 IUnknown, IDispatch 或 SAFEARRAY(安全数组) 指针的所有权. 不调用 AddRef. 如果包装器对象包含 SAFEARRAY (VT_BYREF 除外), 那么当包装器对象被释放时会自动调用 <a href="http://msdn.microsoft.com/en-us/library/ms221702.aspx">SafeArrayDestroy</a>.</td>
  </tr>
</table>

<h3 id="ByRef">ByRef <span class="ver">[v1.1.17+]</span></h3>
<p>如果包装器对象的<a href="ComObjType.htm"><em>变量类型</em></a>包含VT_BYREF (0x4000) 标签, 可用空的方括号对 <code>[]</code>来读写引用的值.</p>
<p>当创建一个引用, <em>值</em>须为变量的内存地址,或,足够存储指定类型的值的缓存.例如, 下面的代码可以用来创建一个VBScript函数可以写入的变量:</p>
<pre>VarSetCapacity(var, 24, 0)
vref := ComObject(0x400C, &amp;var)  <em>; 0x400C是VT_BYREF与VT_VARIANT组合而得.</em>

vref[] := "in value"
sc.Run("Example", vref)  <em>; sc应像<a href="#ByRefEx">下面例子</a>一样进行初始化.</em>
MsgBox % vref[]</pre>

<h3 id="Remarks">一般说明</h3>
<p>当前版本中,除COM相关函数,任何以"ComObj"函数名开头的函数调用实际调用ComObjActive函数.如,<code>ComObjEnwrap(DispPtr)</code>及<code>ComObjActive(DispPtr)</code>均等效于<code>ComObject(DispPtr)</code>(隐式地,<em>变量类型</em>为9).此行为可能于后续版本改变,故,建议仅使用本页所展示的<code>ComObject()</code>及<code>ComObjActive()</code>.</p>
<p>当使用此函数包装或检索 IDispatch 或 IUnknown 接口指针时, 默认的行为会增加 COM 对象的引用计数. 因此,当不使用时,须<a href="ObjAddRef.htm">手动释放</a>接口指针.. 当用于封装的对象被释放时,他所包含的引用被自动释放.</p>
<p><b>已知限制:</b> 每次包装 COM 对象时, 都会创建新的包装器对象. 如 <code>obj1 == obj2</code> ,<code>array[obj1] := value</code>的比较和赋值运算, 会把两个包装器对象视为独立的, 即使它们包含相同的 COM 对象.</p>

<h3 id="Related">相关</h3>
<p><a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjConnect.htm">ComObjConnect</a>, <a href="ComObjError.htm">ComObjError</a>, <a href="ComObjFlags.htm">ComObjFlags</a>, <a href="ObjAddRef.htm">ObjAddRef/ObjRelease</a>, <a href="ComObjQuery.htm">ComObjQuery</a>, <a href="http://msdn.microsoft.com/en-us/library/ms221467.aspx">GetActiveObject (MSDN)</a></p>

<h3>示例</h3>
<p>ComObjUnwrap(COM对象拆包): 参见<a href="ComObjConnect.htm#Examples">ComObjConnect</a>.</p>
<pre class="NoIndent" id="ByRefEx">
<em>; 条件 - ScriptControl 需32位版本的AutoHotkey.</em>
code =
(
Sub Example(Var)
    MsgBox Var
    Var = "输出了值!"
End Sub
)
sc := <a href="ComObjCreate.htm">ComObjCreate</a>("ScriptControl"), sc.Language := "VBScript", sc.AddCode(code)


<em>; 示例: 传递VARIANT ByRef至COM函数.</em>
var := ComVar()
var[] := "in value"
sc.Run("Example", var.ref)
MsgBox % var[]


<em>; ComVar: 创建可用于按引用(ByRef)传值的对象.
;   ComVar[] 返回值.
;   ComVar[] := Val 设置值.
;   ComVar.ref 返回用于COM函数的按引用传值的对象.</em>
ComVar(Type=0xC)
{
    static <a href="../Objects.htm#Custom_Objects">base</a> := { __Get: "ComVarGet", __Set: "ComVarSet", __Delete: "ComVarDel" }
    <em>; 创建含 1 个 VARIANT 类型变量的数组.  此方法可以让内部代码处理
    ; 在 VARIANT 和 AutoHotkey 内部类型之间的所有转换.</em>
    arr := <a href="ComObjArray.htm">ComObjArray</a>(Type, 1)
    <em>;锁定数组并检索到 VARIANT 的指针.</em>
    DllCall("oleaut32\SafeArrayAccessData", "ptr", <a href="ComObjValue.htm">ComObjValue</a>(arr), "ptr*", arr_data)
    <em>;保存数组及可用于按引用传递VARIANT值的对象.</em>
    return { ref: ComObject(0x4000|Type, arr_data), _: arr, base: base }
}

ComVarGet(cv, <a href="../Functions.htm#Variadic">p*</a>) { <em>; 当脚本访问未知字段时调用.</em>
    if p.MaxIndex() = "" <em>; No name/parameters, i.e. cv[]</em>
        return cv._[0]
}

ComVarSet(cv, v, p*) { <em>; Called when script sets an unknown field.</em>
    if p.MaxIndex() = "" <em>; 没有名称/参数,如,cv[]:=v</em>
        return cv._[0] := v
}

ComVarDel(cv) { <em>; 当对象被释放时调用.
    ; 必须进行这样的处理才能释放内部数组.</em>
    DllCall("oleaut32\SafeArrayUnaccessData", "ptr", ComObjValue(cv._))
}
</pre>

</body>
</html>
