<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>ComObjActive()</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObjActive() <span class="ver">[AHK_L 53+]</span></h1>

<p>检索已注册到 OLE 的正在运行的对象.</p>
<pre class="Syntax">ComObject := ComObjActive(CLSID)</pre>

<p id="param">创建表示作为参数或返回值传递的类型化值的对象.</p>
<pre class="Syntax">ParamObj := ComObject(VarType, Value [, Flags])</pre>

<h4 style="margin-top:2em">不建议：</h4>
<p>不建议使用以下方式，后续版本中，可能被替换或不再支持。</p>
<p id="missing">创建在调用 COM 对象的方法时可以用来代替可选参数默认值的对象. 自v1.1.12废弃：使用两个连续的逗号替换，如<code>Obj.Method(1,,3)</code></p>
<pre class="Syntax">ParamObj := ComObjMissing()</pre>

<p id="enwrap">装包或拆包一个位于可用对象中的原生<a href="http://msdn.microsoft.com/en-us/library/dd318520.aspx">IDispatch</a>指针，并制动调用AddRef（增加引用）。</p>
<pre class="Syntax">ComObject := ComObjEnwrap(DispPtr)
DispPtr := ComObjUnwrap(ComObject)</pre>
<p>使用以下方式，使代码更可靠（future-proof）：</p>
<pre>ComObject := ComObject(9, DispPtr, 1), ObjAddRef(DispPtr)
DispPtr := <a href="ComObjValue.htm">ComObjValue</a>(ComObject), ObjAddRef(DispPtr)</pre>

<h3>参数</h3>
<dl>

  <dt>CLSID</dt>
  <dd><p>要检索的 COM 对象的 CLSID 或可读 Prog ID.</p></dd>

  <dt>ComObject</dt>
  <dd><p>可以使用 <a href="../Objects.htm#Usage_Objects">对象语法</a> 的 COM 对象.</p></dd>

  <dt>VarType</dt>
  <dd><p>表示值类型的整数. 请参阅 <a href="ComObjType.htm#vt">ComObjType()</a> 了解类型列表.</p></dd>

  <dt>值</dt>
  <dd><p>要包装的值. 当前仅支持整数值和指针值.</p></dd>

  <dt>Flags</dt>
  <dd><p>影响此函数和包装器对象行为的标志，请参阅后面。</p></dd>

  <dt>DispPtr</dt>
  <dd><p>原始的 IDispatch 指针.</p></dd>

</dl>

<h3 id="Flags">Flags</h3>
<table class="info">
  <tr>
    <td>&nbsp;0&nbsp;</td>
    <td>
      <p>默认行为. 为 IUnknown 和 IDispatch 指针自动调用 <a href="http://msdn.microsoft.com/en-us/library/ms691379.aspx">AddRef</a>, 所以调用者应该在适当时使用 <a href="ObjAddRef.htm">ObjRelease</a> 释放这些指针副本.</p>
      <p>未来版本中可能改变此默认行为，因此建议当包装接口指针时总是设置<em>Flags</em>为<code>1</code>，如果需要则调用<a href="ObjAddRef.htm">ObjAddRef()</a>。</p>
    </td>
  </tr>
  <tr>
    <td>&nbsp;1&nbsp;</td>
    <td>取得 IUnknown, IDispatch 或 SAFEARRAY 指针的所有权. 不调用 AddRef. 如果包装器对象包含 SAFEARRAY (VT_BYREF 除外), 那么当包装器对象被释放时会自动调用 <a href="http://msdn.microsoft.com/en-us/library/ms221702.aspx">SafeArrayDestroy</a>.</td>
  </tr>
</table>


<h3 id="ByRef">ByRef <span class="ver">[v1.1.17+]</span></h3>
<p>如果一个封装对象的<a href="ComObjType.htm"><em>VarType</em></a>包含VT_BYREF (0x4000) 标签, 空的方括号对 <code>[]</code> 可以用来读写引用的值.</p>
<p>当创建一个引用, <em>Value</em> 变量或缓冲区的内存地址必须是具有足够容量存储给定类型的值. 例如, 下面的代码可以用来创建一个VBScript函数可以写入的变量:</p>
<pre>VarSetCapacity(var, 24, 0)
vref := ComObject(0x400C, &amp;var)  <em>; 0x400C is a combination of VT_BYREF and VT_VARIANT.</em>

vref[] := "in value"
sc.Run("Example", vref)  <em>; sc should be initialized as in the <a href="#ByRefEx">example below</a>.</em>
MsgBox % vref[]</pre>

<h3 id="Remarks">一般说明</h3>
<p>当前版本中，任何函数名以"ComObj"开头却与COM相关函数不匹配的函数调用实际被视为ComObjActive调用。如，<code>ComObjEnwrap(DispPtr)</code>及<code>ComObjActive(DispPtr)</code>均等效于<code>ComObject(DispPtr)</code>（隐式地，<em>VarType</em>为9）。此行为可能于后续版本改变，故，建议仅使用本页所展示的<code>ComObject()</code>及<code>ComObjActive()</code>。</p>
<p>当使用此函数包装或检索 IDispatch 或 IUnknown 接口指针时, 默认的行为会增加 COM 对象的引用数. 因此，当不再需要时，须手动释放<a href="ObjAddRef.htm">接口指针</a>。. 当用于封装的对象被释放时，他所包含的引用被自动释放。</p>
<p><b>已知限制:</b> 每次包装 COM 对象时, 都会创建新的包装器对象. 比较和赋值运算中, 例如 <code>obj1 == obj2</code> 和 <code>array[obj1] := value</code>, 会把两个包装器对象视为唯一的, 即使它们包含相同的 COM 对象.</p>

<h3 id="Related">相关</h3>
<p><a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjConnect.htm">ComObjConnect</a>, <a href="ComObjError.htm">ComObjError</a>, <a href="ComObjFlags.htm">ComObjFlags</a>, <a href="ObjAddRef.htm">ObjAddRef/ObjRelease</a>, <a href="ComObjQuery.htm">ComObjQuery</a>, <a href="http://msdn.microsoft.com/en-us/library/ms221467.aspx">GetActiveObject (MSDN)</a></p>

<h3>示例</h3>
<p>ComObjUnwrap: 请参阅 <a href="ComObjConnect.htm#Examples">ComObjConnect</a>.</p>
<pre class="NoIndent" id="ByRefEx"><em>; 示例: 传递 VARIANT ByRef 到 COM 函数.</em>

code =
(
Sub Example(Var)
    MsgBox Var
    Var = "out value!"
End Sub
)
sc := <a href="ComObjCreate.htm">ComObjCreate</a>("ScriptControl"), sc.Language := "VBScript", sc.AddCode(code)

var := ComVar()
var[] := "in value"
sc.Run("Example", var.ref)
MsgBox % var[]

<em>; ComVar: 创建用来传递 ByRef 值的对象.
;   ComVar[] 检索值.
;   ComVar[] := Val 设置值.
;   ComVar.ref 检索 ByRef 对象用于传递到 COM 函数.</em>
ComVar(Type=0xC)
{
    static <a href="../Objects.htm#Custom_Objects">base</a> := { __Get: "ComVarGet", __Set: "ComVarSet", __Delete: "ComVarDel" }
    <em>; 创建含 1 个 VARIANT 类型变量的数组.  此方法可以让内部代码处理
    ; 在 VARIANT 和 AutoHotkey 内部类型之间的所有转换.</em>
    arr := <a href="ComObjArray.htm">ComObjArray</a>(Type, 1)
    <em>; 锁定数组并检索到 VARIANT 的指针.</em>
    DllCall("oleaut32\SafeArrayAccessData", "ptr", <a href="ComObjValue.htm">ComObjValue</a>(arr), "ptr*", arr_data)
    <em>; 保存可用于传递 VARIANT ByRef 的数组和对象.</em>
    return { ref: ComObject(0x4000|Type, arr_data), _: arr, base: base }
}

ComVarGet(cv, <a href="../Functions.htm#Variadic">p*</a>) { <em>;当脚本访问未知字段时调用</em>
    if p.MaxIndex() = "" <em>; 没有名称/参数, 即 cv[]</em>
        return cv._[0]
}
ComVarSet(cv, v, p*) { <em>; 当脚本设置未知字段时调用.</em>
    if p.MaxIndex() = "" <em>; 没有名称/参数, 即 cv[]:=v</em>
        return cv._[0] := v
}
ComVarDel(cv) { <em>; 当对象被释放时调用.
    ; 必须进行这样的处理以释放内部数组.</em>
    DllCall("oleaut32\SafeArrayUnaccessData", "ptr", ComObjValue(cv._))
}
</pre>

</body>
</html>
