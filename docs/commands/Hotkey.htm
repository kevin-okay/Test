<!DOCTYPE HTML>
<html>
<head>
<title>Hotkey</title>
<meta http-equiv="Content-Type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Hotkey</h1>

<p>在脚本运行时创建,修改,启用或禁用热键.</p>

<pre class="Syntax">Hotkey, KeyName [, Label, Options]
Hotkey, IfWinActive/Exist [, WinTitle, WinText]
Hotkey, If [, Expression]</pre>
<h3>参数</h3>
<dl>

  <dt>KeyName 按键名称</dt>
  <dd><p>热键触发键的名称, 包括所有 <a href="../Hotkeys.htm#Symbols">修饰符</a>. 例如,指定 <code>#c</code> 来触发 Win+C 热键.</p>
    <p>如果 <em>KeyName</em> 是现有的热键, 那么将使用此命令的其他参数值更新原来的热键.</p>
    <p><em>KeyName</em> 也可以是现有的热键标签的名称 (即双冒号标签), 这样会使用此命令的其他参数值更新原来的热键.</p>
    <p>指定 <em>现有的</em> 热键时, <em>KeyName</em> 是不区分大小写的. 但是, 按键名称必须和现有的热键拼写相同 (例如在这种情况下 Esc 与 Escape 是不同的). 此外, <a href="../Hotkeys.htm#Symbols">修饰符</a> (例如 ^!+#) 是无关紧要的. <a href="GetKey.htm">GetKeyName</a> 可用于获取正常的按键名称.</p>
    <p>首次创建一个热键时 (通过 Hotkey 命令或脚本中的 <a href="../Hotkeys.htm">双冒号标签</a>), 其键名以及修饰符的顺序成为此热键的固定名称, 像 <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> 包含的那样. 即使之后 Hotkey 命令使用不同的修饰符顺序操作此热键, 此名称也不会改变.</p>
    <p><span class="ver">[v1.1.15+]:</span>如果已存在该热键变体,则根据 <em>KeyName</em> 是否包含<a href="../Hotkeys.htm#Tilde">颚化符(~)前缀</a>更新它的行为.</p>
    <p><span class="ver">[v1.1.19+]:</span> 使用 <a href="../Hotkeys.htm#prefixdollar">钩子 ($) 前缀</a> 可添加到现有热键上. 这个前缀影响所有热键的变体且不能被删除. 在 v1.1.19 之前, 当修改一个现有热键时,这个前缀被直接忽略.</p>
    </dd>

  <dt>Label 标签</dt>
  <dd><p>在 <a href="../misc/Labels.htm">标签</a> 区块中的所有内容都会被执行 (当对应热键按下时以一个新的 <a href="../misc/Threads.htm">线程</a>) 运行 . 可同时使用 <a href="../Hotkeys.htm">热键</a>/<a href="../Hotstrings.htm">热字符串</a> 标签 . 不包括冒号( : 或 :: ) . 如果 <em>标签</em> 是动态的 (比如 %VarContainingLabelName%), 可用 <a href="IsLabel.htm">IsLabel(VarContainingLabelName)</a> 事先检查标签是否存在.</p>
  <p id="Functor"><span class="ver">[v1.1.20+]:</span> 如果不是一个有效的标签名称, 这个参数可以是一个函数的名称, 或者是一个 <a href="../objects/Functor.htm">函数对象</a> 引用变量. 比如, <code>Hotkey %funcobj%, On</code> 或 <code>Hotkey % funcobj, On</code>. 其他返回对象的表达式目前暂不支持. 当热键被触发, 函数就会被调用且无需任何参数. 热键还可以直接 <a href="../Hotkeys.htm#Function">定义为函数</a> 而无需使用 Hotkey 命令.</p>
      <p>如果 <em>KeyName</em> 已经作为热键, 那么参数可以为空, 这种情况下标签不会被改变. 这在需要仅改变热键 <em>Options (选项)</em> 时很有用.</p>
      <p><strong>如果指定了标签或函数, 但热键之前已经使用此命令禁用了, 那么热键会保持禁用状态. 要启用它, 请在 <em>Options</em> 中包含单词 ON.</strong></p>
      <p>此参数还可以是下列特定值的其中一个:</p>
      <p><strong>On</strong>: 启用热键. 如果热键已经处于启用状态, 则不进行操作.</p>
      <p><strong>Off</strong>: 禁用热键. 如果热键已经处于禁用状态, 则不进行操作.</p>
      <p><strong>Toggle</strong>: 设置热键到相反的状态 (启用或禁用).</p>
      <p><strong>AltTab</strong> (及其他): 这些是 <a href="../Hotkeys.htm#alttab">这里</a> 描述的特殊的 Alt-Tab 热键动作.</p>
      <p><strong><u>注意:</u></strong> 在定义标签名称为 On , Off , Toggle 或 AltTab (或是任何被这个命令支持的名称) 时可能会导致矛盾的行为. 强烈建议不使用这些值作为标签的名字.</p>
      </dd>

  <dt>Options 选项</dt>
  <dd><p>由零个或多个下列字母组成的字符串, 字母间可以用空格分隔. 例如:<code>UseErrorLevel B0</code></p>
      <p id="UseErrorLevel"><strong>UseErrorLevel</strong>: 如果命令遇到问题, 使用此选项会跳过警告对话框, 设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 为 <a href="#ErrorLevel">下表</a> 中的一个代码, 然后让 <a href="../misc/Threads.htm">当前线程</a> 继续执行.</p>
      <p><strong>On</strong>: 如果热键当前是禁用的则启用它.</p>
      <p><strong>Off</strong>: 如果热键当前是启用的则禁用它. 此选项常用来创建初始状态为禁用的热键.</p>
      <p><strong>B</strong> 或 <strong>B0</strong>: 指定字母 B 将按照 <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a> 描述的方法缓冲热键. 指定 B0 (B 后跟着数字 0) 来禁用这种类型的缓冲.</p>
      <p><strong>Pn</strong>: 指定字母 P 后面跟着热键的 <a href="../misc/Threads.htm">线程优先级</a>. 如果创建热键时省略 P 选项, 则设置优先级为 0.</p>
      <p><strong>Tn</strong>: 指定字母 T 后面跟着一个表示此热键允许的线程数, 如同 <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> 中描述的那样. 例如:<code>T5</code>.</p>
      <p><strong>In</strong> (表示: InputLevel 输入级别) <span class="ver">[v1.1.23+]</span>: 指定字母 I (或 i) 跟随热键的 <a href="_InputLevel.htm">input level (输入级别)</a>. 例如: <code>I1</code>.</p>
      <p>如果任一选项字母被忽略并且热键已经存在, 这些选项将不会起作用. 但如果热键还没创建(将由这条命令创建), 这些选项将会影响那些最近创建的热键. 例如, 即使 <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a> 出现在脚本底部的情况下也会被采用. 而如果脚本中没有出现 <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a> , 则会采用其默认值 (这里是 OFF) . 这种特性也适用于 <a href="_IfWinActive.htm">#IfWin</a>: 脚本最底部出现的#IfWin会适用于最近创建的热键除非 &quot;<a href="#IfWin">Hotkey IfWin</a>&quot; 在脚本开始时就已执行</p>
      </dd>

  <dt>IfWinActive<br>
  IfWinExist</dt>
  <dd><p>(也支持 IfWin<strong>Not</strong>Active 和 IfWin<strong>Not</strong>Exist). 这些子命令让此后创建的所有热键都是上下文相关的. 请参阅 <a href="#IfWin">后面</a> 了解详情.</p></dd>

  <dt>WinTitle<br>
  WinText</dt>
  <dd><p>在这两个参数中, 任何变量引用 (例如 %var%) 会在命令执行结束时被固定下来. 换句话说, 此后对这些变量内容的改变不会影响现有的 IfWin 热键.</p>
      <p>与 <a href="_IfWinActive.htm">#IfWinActive/Exist</a> 一样,<em>WinTitle</em> 和 <em>WinText</em> 为 <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a> 和 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> 使用在<a href="../Scripts.htm#auto">自动执行段</a>中的默认设置.请参阅 <a href="_IfWinActive.htm">#IfWinActive/Exist</a> 了解详情.</p></dd>

  <dt id="If">If, 表达式</dt>
  <dd>
    <p><span class="ver">[AHK_L]:</span> 对应于 <a href="_If.htm">#If <i>表达式</i></a>. <em>表达式</em> 必须是在脚本其他任何地方用 #If 指令开头的的表达式. 通过这个命令不能创建新的表达式,而只能用已经存在的表达式创建新的热键定义. 请参考 <a href="_If.htm#ex4">#If 例子 4</a>.</p>
    <p><strong>注意:</strong> 这个 Hotkey 只能用你传递给它的文本, 而不是原始代码. 逗号和变量符号 (百分号) 是在命令调用 <em>之前</em> 被解析的, 所以如果这些符号是原始表达式中的一部分, 则应该先转换一下. <a href="_EscapeChar.htm">转义序列</a> 是脚本加载的时候就进行转换的, 所以只产生字符;例如:<br><code>Hotkey, If, x = "`t"</code><br>和<br><code>Hotkey, If, % "x = """ A_Tab """"</code><br>都对应于<br><code>#If x = "`t"</code>.</p>
    <p><strong>已知限制: </strong>If <em>表达式</em> 包含 <code>and</code>/<code>or</code> 运算符的时候, 不会被识别为表达式. 为了避免此问题, 请在原来的 #If 表达式和传递给 Hotkey 命令的表达式中使用等价的 <code>&amp;&amp;</code>/<code>||</code> 运算符.</p>
  </dd>

</dl>

<h3 id="ErrorLevel">ErrorLevel</h3>
<p><span class="ver">[v1.1.04+]</span> 此命令失败时会抛出异常. 想了解更多信息, 请参阅 <a href="Catch.htm#RuntimeErrors">运行时错误</a>.</p>
<p>只有在出现下列情况时 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 才会被改变:<br>1) 首个参数为 IfWin[Not]Active/Exist, 此时如果遇到问题它会被设置为 1 否则为 0;<br>或者:<br>2) 在 <em>Options</em> 参数中使用了单词 UseErrorLevel.</p>
<table class="info">
  <tr>
    <th>错误</th>
    <th>说明</th>
  </tr>
  <tr>
    <td>1</td>
    <td><em>Label</em> 参数指定了不存在的标签名.</td>
  </tr>
  <tr>
    <td>2</td>
    <td><em>KeyName</em> 参数指定了一个或多个当前键盘布局/语言无法识别或不支持的键.</td>
  </tr>
  <tr>
    <td>3</td>
    <td>不支持的前缀键. 例如,不支持使用鼠标滚轮作为热键(如 <code>WheelDown &amp; Enter</code>)的前缀.</td>
  </tr>
  <tr>
    <td>4</td>
    <td><em>KeyName</em> 参数不适合用于 <a href="../Hotkeys.htm#alttab">AltTab 或 ShiftAltTab</a>功能.这种情况下要求热键为两个键的组合. 例如:<code>RControl &amp; RShift::AltTab</code>.</td>
  </tr>
  <tr>
    <td>5</td>
    <td>命令试图修改不存在的热键.</td>
  </tr>
  <tr>
    <td>6</td>
    <td>命令试图修改现有热键的不存在的 <a href="#variant">变体</a>. 要解决此问题,请使用 <a href="#IfWin">Hotkey IfWin</a> 来设置匹配那些需修改的热键变体的标准.</td>
  </tr>
  <tr>
    <td>98</td>
    <td>创建此热键后将超过每脚本 1000 个热键的限制 (不过, 每个热键的 <a href="#variant">变体</a> 数目不受限制, 并且对于 <a href="Hotstrings.htm">热字串</a> 的数目也没有限制).</td>
  </tr>
  <tr>
    <td>99</td>
    <td>内存不足. 这种情况极少, 通常仅在操作系统变得不稳定时才会发生.</td>
  </tr>
</table>
<p><br>
提示: 使用 UseErrorLevel 选项可以检查一个热键的变体是否存在. 例如:</p>
<pre>Hotkey, ^!p,, UseErrorLevel
if ErrorLevel in 5,6
    MsgBox 热键定义不存在 或者 它不是当前 IfWin 的条件的变体.</pre>

<h3>备注</h3>
<p><a href="#IfWin">当前的 IfWin 设置</a> 决定了 Hotkey 命令将操作热键的哪个 <a href="#variant">变体</a>.</p>
<p>如果需要根据活动窗口的类型自动禁用选择的热键或热字串,使用 <code>Hotkey, ^!c, Off</code> 通常不如 <a href="_IfWinActive.htm">#IfWinActive/Exist</a>(或它们<a href="#IfWin">下面</a>的动态副本"Hotkey IfWinActive/Exist")来的方便.</p>
<p>通过 <a href="../Hotkeys.htm">双冒号</a> 创建热键比使用 Hotkey 命令执行地更好, 因为在脚本启动时会批量启用它们 (而非一个一个地启用). 因此, 最好使用此命令创建那些在脚本开始运行后才知道键名的热键. 一种这样的情况是通过 <a href="IniRead.htm">INI 文件</a> 为热键配置了多个不同的动作.</p>
<p>给定的标签可以是多个热键的目标. 如果某个热键调用了标签, 您可以通过检查内置变量 <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> 来确定是哪个热键.</p>
<p>如果脚本是 <a href="Suspend.htm">挂起的</a>, 那么新增加/启用的热键也将是挂起的, 直到挂起状态被关闭 (除非它们像 <a href="Suspend.htm">Suspend</a> 命令中描述的那样被免除了).</p>
<p>由此命令做出的改变使得 <a href="_InstallKeybdHook.htm">键盘</a> 和/或 <a href="_InstallMouseHook.htm">鼠标</a> 钩子被安装或移除是正常的.</p>
<p>尽管 Hotkey 命令不能直接启用或禁用脚本中不是它创建的热键, 但在大多数情况下它可以通过创建或启用相同的热键来 <a href="../misc/Override.htm">覆盖</a> 它们. 这样是否有效取决于下列因素:1) 在其他脚本中需要被覆盖的热键是否为<a href="ListHotkeys.htm">钩子热键</a>(非钩子热键总是可以成功覆盖)；2) 最近启动的热键通常优先于其他脚本中的相同热键(因此,如果要覆盖其他脚本中的脚本是最近启动的,覆盖总是会成功)；3) 此热键的启用或创建是否会重新激活<a href="_InstallKeybdHook.htm">键盘</a>或<a href="_InstallMouseHook.htm">鼠标</a>钩子(如果是,那么覆盖总是会成功).</p>
<p>每当脚本含有至少一个热键时, 它会变成持续运行的, 这意味着应该使用 <a href="ExitApp.htm">ExitApp</a> 而不是 Exit 来终止它. 同时热键脚本自动为 <a href="_SingleInstance.htm">#SingleInstance</a> 的单实例属性,不过可以指定 <code>#SingleInstance Off</code> 来关闭.</p>
<h3 id="IfWin">关于 <em>Hotkey, IfWinXX [, WinTitle, WinText]</em> 的备注</h3>
<p>"Hotkey IfWin" 命令允许在脚本运行时创建或修改上下文相关的 <a href="../Hotkeys.htm">热键</a> (与之相比, <a href="_IfWinActive.htm">#IfWinActive/Exist</a> 指令是由位置决定的并且在脚本启动时生效). 例如:</p>
<pre>Hotkey, IfWinActive, ahk_class Notepad
Hotkey, ^!e, MyLabel  <em>; 创建仅在记事本中有效的热键.</em></pre>
<p>使用 "Hotkey IfWin" 会把后续创建或修改的所有 <a href="../Hotkeys.htm">热键</a> 都变成上下文相关的. 此外, 每个 IfWin 子命令是互斥的; 即只有最近的那个会起作用.</p>
<p>要关闭上下文相关性 (即让后续创建的热键对所有窗口有效), 请指定任一省略了 <em>WinTitle/Text</em> 参数的 IfWin 子命令. 例如:<code>Hotkey, IfWinActive</code>.</p>
<p>如果脚本中没有使用过"Hotkey IfWin",则最近使用的<a href="_IfWinActive.htm">#IfWin</a>指令(如果有)将作用于Hotkey命令.</p>
<p>通过 IfWin 禁用鼠标或键盘热键后, 则热键会执行它原来的功能; 即如同这样的热键不存在那样被直接传递到活动窗口. 有一种情况例外:对于操纵杆热键,尽管 #IfWin 有效,但它不能阻止其他程序探测到按钮的按下动作.</p>
<h3 id="variant">变体 (副本) 热键</h3>
<p>只要每次定义时含有不同的 IfWin 条件, 一个特定的热键可以被创建多次. 这被称为 <em>热键变体</em>. 例如:</p>
<pre>Hotkey, IfWinActive, ahk_class Notepad
Hotkey, ^!c, MyLabelForNotepad
Hotkey, IfWinActive, ahk_class WordPadClass
Hotkey, ^!c, MyLabelForWordPad
Hotkey, IfWinActive
Hotkey, ^!c, MyLabelForAllOtherWindows</pre>
<p>如果有多个变体符合触发条件, 那么仅触发最早创建的那个. 这种情况的例外是全局变体 (不带有 IfWin 条件的那个): 它的优先级总是最低, 仅当其他变体都不触发时它才会被触发.</p>
<p>创建重复热键时, <a href="../Hotkeys.htm#Symbols">修饰符</a> 的顺序例如 ^!+# 没有关系. 例如:<code>^!c</code>等效于<code>!^c</code>.但是, 按键必须拼写一致. 例如,用于此目的时 <em>Esc</em> 与 <em>Escape</em> 是有区别的(尽管不会受大小写形式的影响).最后,任何带有<a href="../Hotkeys.htm#wildcard">通配符前缀(*)</a>的热键和不带通配符的完全不同；例如, <code>*F1</code> 和 <code>F1</code> 将拥有各自的变体设置.</p>
<p>关于 IfWin 热键的更多信息, 请参阅 <a href="_IfWinActive.htm#gen">#IfWin 的一般说明</a>.</p>
<h3>相关</h3>
<p><a href="../Hotkeys.htm#Symbols">热键修饰符</a>, <a href="_IfWinActive.htm">#IfWinActive/Exist</a>, <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="Suspend.htm">Suspend</a>, <a href="IsLabel.htm">IsLabel()</a>, <a href="../misc/Threads.htm">线程</a>, <a href="Thread.htm">Thread</a>, <a href="Critical.htm">Critical</a>, <a href="Gosub.htm">Gosub</a>, <a href="Return.htm">Return</a>, <a href="Menu.htm">Menu</a>, <a href="SetTimer.htm">SetTimer</a></p>
<h3>示例</h3>
<pre class="NoIndent">Hotkey, ^!z, MyLabel
return

MyLabel:
MsgBox You pressed %A_ThisHotkey%.
return

<em>; 其他的例子:</em>
Hotkey, RCtrl &amp; RShift, AltTab <em>; 让 RCtrl &amp; RShift 执行 Alt-Tab 的功能.</em>
Hotkey, #c, On  <em>; 重新启用 Win-C 热键.</em>
Hotkey, $+#c, Off  <em>; 禁用 Shift-Win-C 热键.</em>
Hotkey, ^!a, , T5  <em>; 改变热键为允许 5 个线程.</em>

Hotkey, IfWinActive, ahk_class Notepad
Hotkey, ^!c, MyLabelForNotepad  <em>; 创建仅在记事本中有效的热键 Ctrl-Alt-C.</em></pre>

</body>
</html>
