<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>#Include</title>
<meta http-equiv="content-type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>#Include / #IncludeAgain</h1>

<p>让脚本认为指定文件的内容会出现在这个准确的位置。</p>

<pre class="Syntax">#Include FileOrDirName
#Include &lt;LibName&gt;
#IncludeAgain FileOrDirName</pre>
<h3>参数</h3>
<dl>

  <dt>FileOrDirName</dt>
  <dd><p>文件或目录的路径，接着会详细说明。这里<strong>不能包含</strong>双引号、通配符和除 <a href="../Variables.htm#ScriptDir">%A_ScriptDir%</a>、<a href="../Variables.htm#AppData">%A_AppData%</a>、<a href="../Variables.htm#AppDataCommon">%A_AppDataCommon%</a> 及（在 v1.1.11+）<a href="../Variables.htm#LineFile">%A_LineFile%</a> 外的变量引用。不能使用除分号（<strong>`;</strong>）外的其他<a href="_EscapeChar.htm">转义序列</a>，也不需要使用它们，因为像百分号这样的字符会被当成原义处理。</p>
    <p><strong>File:</strong> 要包含的文件名, 如果未指定绝对路径, 则假定在启动/工作目录 (除了 <a href="Scripts.htm#ahk2exe">ahk2exe</a>, 它会假定文件在脚本自身目录). 注意：<a href="SetWorkingDir.htm">SetWorkingDir</a> 对 #Include 没有效果，因为在脚本开始执行前已经处理了 #Include。</p>
      <p><strong>Directory:</strong> 指定目录而不是文件来改变后续所有的 #Include 和 <a href="FileInstall.htm">FileInstall</a> 使用的工作目录. 注意：用这种方式改变工作目录不会影响脚本启动时的初始工作目录 （<a href="../Variables.htm#WorkingDir">A_WorkingDir</a>）。要改变初始工作目录，请在脚本的顶部使用 <a href="SetWorkingDir.htm">SetWorkingDir</a>。</p></dd>

  <dt>LibName</dt>
  <dd><p><span class="ver">[AHK_L 57+]:</span> 库文件或函数的名称. 例如, <code>#include &lt;lib&gt;</code> 和 <code>#include &lt;lib_func&gt;</code> 都会包含某个 <a href="../Functions.htm#lib">函数库文件夹</a> 中的 lib.ahk.</p></dd>

</dl>
<h3>备注</h3>
<p>脚本认为包含文件的内容实际会出现在 #Include 指令的准确位置 (就好像从包含的文件中复制粘贴过来一样). 因此, 它通常不能把两个孤立的脚本合并成一个可运行的脚本 (要实现这样的效果, 请参阅 <a href="http://www.autohotkey.com/forum/topic18545.html">www.autohotkey.com/forum/topic18545.html</a>).</p>
<p>#Include 确保仅包含 <em>FileName</em> 一次, 即使它遇到多次重复的包含. 与之相比, #IncludeAgain 允许多次包含同一文件, 其他方面则和 #Include 一样.</p>
<p>可以在 <em>FileName</em> 参数前加上 *i 和单个空格，这样会使程序忽略读取包含文件时出现的任何问题。例如：<code>#Include *i SpecialOptions.ahk</code>。此选项应该仅在包含文件的内容对主脚本的操作可有可无的情况下才使用.</p>
<p>通过 <a href="ListLines.htm">ListLines</a> 或菜单 View-&gt;Lines 显示在主窗口的那些行总是按照它们在文件内的物理顺序编号的. 换句话说, 包含新文件只会改变主脚本文件的一行编号, 即 #Include 所在行 (除了 <a href="Scripts.htm#ahk2exe">已编译脚本</a>, 它会在编译时把它们包含的文件合并成一个大的脚本).</p>
<p>#Include 常用来加载在外部文件中定义的 <a href="Functions.htm">函数</a>. 和子程序标签不同, 可以在脚本的顶部包含 <a href="Functions.htm">函数</a> 而不影响 <a href="../Scripts.htm#auto">自动执行段</a>.</p>
<p>与其他 # 指令类似, 不能根据条件执行 #Include. 换句话说, 这个例子不起作用:</p>
<pre>if x = 1
    #Include SomeFile.ahk  <em>; 不管 x 的值是什么此行都会执行.</em>
    y = 2  <em>; 而此行属于上面的 IF, 因为 # 指令不属于 IF.</em></pre>
<p>通过调用 <a href="../Functions.htm#lib">库函数</a> 中的函数名称可以自动将文件包含进来 (即不需要使用 #Include).</p>
<p><span class="ver">[v1.1.11+]：</span>使用<code>%A_LineFile%\..</code> 可以引用包含当前文件的目录，即使当前文件不是主脚本文件也有效。例如，<code>#Include %A_LineFile%\..\other.ahk</code>。</p>

<h3>相关</h3>
<p><a href="../Functions.htm#lib">函数库</a>, <a href="Functions.htm">函数</a>, <a href="FileInstall.htm">FileInstall</a></p>
<h3>示例</h3>
<pre class="NoIndent">#Include C:\My Documents\Scripts\Utility Subroutines.ahk
#Include %A_ScriptDir%  <em>; 为后续的 #Include 和 FileInstall 改变工作目录.</em>
#Include C:\My Scripts  <em>; 和上面相同, 不过这里指定明确的命名目录.</em></pre>

</body>
</html>
