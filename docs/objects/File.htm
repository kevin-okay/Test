<!DOCTYPE HTML>
<html>
<head>
<title>File 对象</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb22312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>File对象 <span class="ver">[AHK_L 42+]</span></h1>

<p>提供文件输入/输出的接口. <a href="../commands/FileOpen.htm">FileOpen</a> 返回文件类型的对象.</p>

<div class="methodShort" id="Read"><h2>Read</h2>
<p>从文件读取字符串并使文件指针向前移动.</p>
<pre class="Syntax">String := File.Read([Characters])</pre>
<table class="info">
  <tr><td style="width:15%">Characters</td><td>需读取的最大字符数. 如果省略, 则读取文件的剩余部分并作为单个字符串返回. 如果 File 对象创建于非搜寻设备(例如控制台缓冲区或管道)的句柄,省略此参数可能引起执行方法失败或仅返回当前可用的数据.</td></tr>
  <tr><td><b>返回值</b></td><td>字符串.</td></tr>
</table></div>

<div class="methodShort" id="Write"><h2>Write</h2>
<p>写入字符串到文件并使文件指针向前移动.</p>
<pre class="Syntax">File.Write(String)</pre>
<table class="info">
  <tr><td style="width:15%">String</td><td>字符串.</td></tr>
  <tr><td><b>返回值</b></td><td>写入的字节数 (不是字符数).</td></tr>
</table></div>

<div class="methodShort" id="ReadLine"><h2>ReadLine</h2>
<p>从文件中读取一行文本并使文件指针向前移动.</p>
<pre class="Syntax">Line := File.ReadLine()</pre>
<table class="info">
  <tr><td style="width:15%"><b>返回值</b></td><td>一行文本. 其中可能包括 <code>`n</code>, <code>`r`n</code> 或 <code>`r</code>, 取决于文件和打开文件时使用的 EOL 标志.</td></tr>
</table></div>

<div class="methodShort" id="WriteLine"><h2>WriteLine</h2>
<p>写入字符串后面跟着 <code>`n</code> 或 <code>`r`n</code>, 取决于打开文件时使用的标志. 使文件指针向前移动.</p>
<pre class="Syntax">File.WriteLine([String])</pre>
<table class="info">
  <tr><td style="width:15%">String</td><td>可选的字符串.</td></tr>
  <tr><td><b>返回值</b></td><td>写入的字节数 (不是字符数).</td></tr>
</table></div>

<div class="methodShort" id="ReadNum"><h2>Read<i>Num</i></h2>
<p>从文件中读取指定类型的数据并使文件指针向前移动.</p>
<pre class="Syntax">Num := File.Read<i>NumType</i>()</pre>
<table class="info">
  <tr><td style="width:15%"><i>NumType</i></td><td>指定下列各项的其中一个直接作为函数名称的一部分:<br>UInt, Int, Int64, Short, UShort, Char, UChar, Double 或 Float.</td></tr>
  <tr><td><b>返回值</b></td><td>成功时返回数字, 否则返回空字符串.</td></tr>
</table>
<p>如果使用 Try 语句且没有读取任何字节时将抛出异常. 但是, 如果读取到任何字节则不会抛出异常, 即使 <i>NumType</i> 的设定值大于读取的字节数. 不足位用0填充.</p></div>

<div class="methodShort" id="WriteNum"><h2>Write<i>Num</i></h2>
<p>写入指定类型的数据到文件并使文件指针向前移动.</p>
<pre class="Syntax">File.Write<i>NumType</i>(Num)</pre>
<table class="info">
  <tr><td style="width:15%"><i>NumType</i></td><td>指定下列各项的其中一个直接作为函数名称的一部分:<br>UInt, Int, Int64, Short, UShort, Char, UChar, Double 或 Float.</td></tr>
  <tr><td>Num</td><td>数字.</td></tr>
  <tr><td><b>返回值</b></td><td>写入的字节数. 例如, 写入成功时 WriteUInt 返回 4.</td></tr>
</table></div>

<div class="methodShort" id="RawRead"><h2>RawRead</h2>
<p>从文件读取原始的二进制数据到内存. 如果指定了变量, 则必要时会自动扩展.</p>
<pre class="Syntax">File.RawRead(VarOrAddress, Bytes)</pre>
<table class="info">
  <tr><td style="width:15%">VarOrAddress</td><td>用来保存复制出来的数据的变量或内存地址.用法类似于 <a href="../commands/NumGet.htm">NumGet</a>.</td></tr>
  <tr><td>Bytes</td><td>需读取的最大字节数.</td></tr>
  <tr><td><b>返回值</b></td><td>读取的字节数.</td></tr>
</table>
<p>如果使用 Try 语句,且 <em>Bytes</em> 不为零,但是没有读取到字节, 则抛出异常. 如果有需要,可使用 <a href="#AtEOF">AtEOF</a> 来避免这种情况.</p></div>

<div class="methodShort" id="RawWrite"><h2>RawWrite</h2>
<p>写入原始的二进制数据到文件.</p>
<pre class="Syntax">File.RawWrite(VarOrAddress, Bytes)</pre>
<table class="info">
  <tr><td style="width:15%">VarOrAddress</td><td>包含数据的变量或内存中的数据地址.用法类似于 <a href="../commands/NumPut.htm">NumPut</a>.</td></tr>
  <tr><td>Bytes</td><td>需写入的字节数.</td></tr>
  <tr><td><b>返回值</b></td><td>写入的字节数.</td></tr>
</table></div>

<div class="methodShort" id="Seek"><h2>Seek</h2>
<p>移动文件指针.</p>
<pre class="Syntax">File.Seek(Distance [, Origin = 0])
File.Position := Distance
File.Pos := Distance</pre>
<table class="info">
  <tr><td style="width:15%">Distance</td><td>需移动的距离, 单位为字节. 较小的值更接近文件的开始处.</td></tr>
  <tr><td>Origin</td><td>文件指针开始移动的起点. 必须为下列值的其中一个:<ul>
      <li>0 (SEEK_SET): 文件的开始处. <i>Distance</i> 必须为零或更大.</li>
      <li>1 (SEEK_CUR): 文件指针的当前位置.</li>
      <li>2 (SEEK_END): 文件的末尾. <i>Distance</i> 通常应该为负数.</li>
    </ul>如果省略, 当 Distance 为负数时 <i>Origin</i> 为 SEEK_END, 而其他情况时为 SEEK_SET.</td></tr>
  <tr><td><b>返回值</b></td><td>成功时为非零值, 否则为零.</td></tr>
</table></div>

<div class="methodShort" id="Tell"><h2>Tell</h2>
<pre class="Syntax">Pos := File.Tell()
Pos := File.Position
Pos := File.Pos</pre>
<table class="info">
  <tr><td style="width:15%"><b>返回值</b></td><td>文件指针的当前位置, 文件开始处为 0.</td></tr>
</table></div>

<div class="methodShort" id="Length"><h2>Length</h2>
<p>获取或设置文件的大小.</p>
<pre class="Syntax">FileSize := File.Length
File.Length := NewSize</pre>
<table class="info">
  <tr><td style="width:15%">NewSize</td><td>文件的新大小, 单位为字节.</td></tr>
  <tr><td><b>返回值</b></td><td>文件的大小, 单位为字节.</td></tr>
</table>
<p>此属性应该仅用于真实的文件.如果 File 对象创建于管道的句柄,那么它可能返回管道内部缓冲区中当前可能数据的数目,但不能保证一定如此.</p></div>

<div class="methodShort" id="AtEOF"><h2>AtEOF</h2>
<pre class="Syntax">IsAtEOF := File.AtEOF</pre>
<table class="info">
  <tr><td style="width:15%"><b>返回值</b></td><td>当文件指针到达文件的末尾时为非零值, 否则为零.</td></tr>
</table>
<p>此属性应该仅用于真实的文件.如果 File 对象创建于非搜寻设备(例如控制台缓冲区或管道)的句柄,那么返回的值可能没有意义,因为这些设备逻辑上没有"文件末尾".</p></div>

<div class="methodShort" id="Close"><h2>Close</h2>
<p>关闭文件, 把缓冲区的数据写入磁盘并释放共享锁定. 尽管当对象释放时文件会自动关闭, 不过建议尽快关闭文件.</p>
<pre class="Syntax">File.Close()</pre>
<p><i>没有参数或返回值.</i></p></div>

<div class="methodShort" id="Encoding"><h2>Encoding</h2>
<p>获取或设置此文件对象使用的编码.</p>
<pre class="Syntax">Encoding := File.Encoding
File.Encoding := Encoding</pre>
<table class="info">
  <tr><td style="width:15%">Encoding</td><td>数值的代码页标识(见<a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">MSDN</a>)或以下字符串之一:<br>
  <ul>
	<li><code>UTF-8</code>: Unicode UTF-8, 相当于 CP65001.</li>
	<li>带小端字节顺序标识的Unicode UTF-16等效于CP1200.</li>
	<li><code>CP<i>nnn</i></code>: 带数值标识符 <i>nnn</i> 的代码页.</li>
  </ul>
  <p><em>Encoding</em>不会返回带<code>-RAW</code>前缀的值,不论文件如何被打开或收费包含字节顺序标识(BOM).设置<em>Encoding</em>不会增加或移除BOM,因为BOM通常在文件建立时就被写入其中.</p>
  <p>在v1.1.15.04+中设置<em>Encoding</em>至<code>UTF-8-RAW</code>或<code>UTF-16-RAW</code>合法,但<code>-RAW</code>前缀被忽略.早期版本中,<code>UTF-8-RAW</code>及<code>UTF-16-RAW</code>如同非法的8位编码,致使所有非ASCII字符被丢弃.这仅影响<code>File.Encoding</code>,而非<a href="../commands/FileOpen.htm">FileOpen()</a>.</p>
  </td></tr>
</table></div>

<div class="methodShort" id="Handle"><h2>__Handle</h2>
<pre class="Syntax">File.__Handle</pre>
<table class="info">
  <tr><td style="width:15%"><b>返回值</b></td><td>与 DllCall 一起使用的系统文件句柄. 请参阅 <a href="http://msdn.microsoft.com/en-us/library/aa363858.aspx">CreateFile</a>.</td></tr>
</table>
<p>文件对象使用内部缓冲区读取或写入.如果数据已经被写入对象的内部缓冲区,则在返回句柄前会确保把数据写入磁盘.如果缓冲区中包含从文件读取的数据,则会把数据丢弃且文件指针的实际位置被重设为由 <code>File.Pos</code> 表示的逻辑位置.</p></div>

</body>
</html>
