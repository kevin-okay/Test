<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>AutoHotkey Scripts and Macros</title>
<meta http-equiv="Content-Type" content="text/html; charset=GB2312">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>脚本</h1>

<h2>目录</h2>
<ul>
  <li><a href="#intro">简介</a></li>
  <li><a href="#auto">脚本顶部（自动执行段）</a>：当脚本启动时，这部分会自动执行.</li>
  <li><a href="#esc">转义序列</a>: 什么时候应该使用 `% 和 `, 来表示原义的百分号或逗号.</li>
  <li><a href="#Comments">在脚本中添加注释</a>: 使用分号和 /*...*/ 符号来给脚本添加注释.</li>
  <li><a href="#continuation">把过长的行分割成一系列短行</a>: 这样可以提高脚本的可读性和可维护性.</li>
  <li><a href="#ahk2exe">把脚本转换成 EXE (ahk2exe)</a>: 把 .ahk 脚本转换成可以在任何 PC 上运行的 .exe 文件.</li>
  <li><a href="#cmd">向脚本传递命令行参数</a>: %1%, %2% 等变量包含了传入的参数.</li>
  <li><a href="#cp">脚本文件代码页</a>: 在脚本中可靠地使用非 ASCII 字符.</li>
  <li><a href="#debug">调试脚本</a>: 如何找出无法正常工作的脚本中的问题.</li>
  <li><a href="#port">AutoHotkey.exe 的可移植性</a>: 只要有 AutoHotkey.exe 的副本就足以执行任何的 .ahk 文件.</li>
  <li><a href="#install">安装程序选项</a>: 如何无人值守/静默的安装或卸载.</li>
</ul>
<h2 id="intro">简介</h2>
<p>每个脚本都是纯文本文件, 其中包含了可由程序 (AutoHotkey.exe) 执行的文本行. 脚本中还可以包含 <a href="Hotkeys.htm">热键</a> 和 <a href="Hotstrings.htm">热字串</a> 或者甚至完全由它们组成. 不过, 在不包含热键和热字串时, 脚本会在启动后从上往下按顺序执行其中的命令.</p>
<p>程序会把脚本逐行加载到内存中, 每行最多可以包含 16,383 个字符. 在加载过程中, 脚本会被 <a href="misc/Performance.htm">优化</a> 和检查. 将列出所有的语法错误, 更正它们后脚本才能运行.</p>
<h2><a name="auto" id="auto"></a>脚本顶部 (自动执行段)</h2>
<p>脚本加载完成后，它会从顶行开始执行，直到遇到 <a href="commands/Return.htm">Return</a>、<a href="commands/Exit.htm">Exit</a>、<a href="Hotkeys.htm">热键/热字串标签</a> 或脚本的底部（无论最先遇到哪个）.脚本的这个顶端部分被称为 <em>自动执行</em> 段.</p>
<p>如果脚本不是 <a href="commands/_Persistent.htm">持续运行的</a> 且不含有 <a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, <a href="commands/OnMessage.htm">OnMessage</a> 和 <a href="commands/Gui.htm">GUI</a>, 那么它会在自动执行段结束后终止. 否则, 它会以空闲状态继续运行, 从而对例如热键, 热字串, <a href="commands/Gui.htm#label">GUI 事件</a>, <a href="commands/Menu.htm">自定义菜单项</a> 和 <a href="commands/SetTimer.htm">计时器</a> 这些事件进行响应.</p>
<p>每个由 <a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, <a href="commands/Menu.htm">菜单项</a>, <a href="commands/Gui.htm#label">GUI 事件</a> 或 <a href="commands/SetTimer.htm">计时器</a> 启动的 <a href="misc/Threads.htm">线程</a> 都以在自动执行段设置的下列属性值作为默认值开始.如果没有设置，则使用标准的默认值（与下面每个页面中注明的一样）：<a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>、<a href="commands/DetectHiddenText.htm">DetectHiddenText</a>、<a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>、<a href="commands/SetBatchLines.htm">SetBatchLines</a>, <a href="commands/SendMode.htm">SendMode</a>、<a href="commands/SetKeyDelay.htm">SetKeyDelay</a>、<a href="commands/SetMouseDelay.htm">SetMouseDelay</a>、
  <a href="commands/SetWinDelay.htm">SetWinDelay</a>、
  <a href="commands/SetControlDelay.htm">SetControlDelay</a>、
  <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>、
  <a href="commands/CoordMode.htm">CoordMode</a>、
  <a href="commands/SetStoreCapslockMode.htm">SetStoreCapslockMode</a>、
<a href="commands/AutoTrim.htm">AutoTrim</a>、<a href="commands/SetFormat.htm">SetFormat</a>、<a href="commands/StringCaseSense.htm">StringCaseSense</a>、<a href="commands/Thread.htm">Thread</a> 和 <a href="commands/Critical.htm">Critical</a>.</p>
<p>如果自动执行段执行了很长时间才结束 (或永不结束), 上面这些设置的默认值将在 100 毫秒后自动生效. 当自动执行段最终结束 (如果可能) 时, 在自动执行段末尾生效的那些设置才更新为默认值. 因此, 通常最好在包含 <a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, <a href="commands/SetTimer.htm">计时器</a> 或 <a href="commands/Menu.htm">自定义菜单项</a> 的脚本顶部设置自己想要的默认值. 还要注意, 每个 <a href="misc/Threads.htm">线程</a> 会保存它自己的上述设置的集合. 在一个线程中对这些设置的改变不会影响其他 <a href="misc/Threads.htm">线程</a>.</p>
<h2 id="esc">转义序列</h2>
<p>AutoHotkey 中默认的 <a href="commands/_EscapeChar.htm">转义符</a> 为重音符/反引号 (`), 它位于大多数英文键盘的左上角. 使用这个字符而不是反斜线可以与在文件路径的双反斜线以示区分.</p>
<p>由于 AutoHotkey 中的逗号和百分号都具有特殊含义，因此需要使用 <code>`,</code> 来指定原义的逗号，使用 <code>`%</code> 来指定原义的百分号.其中的一个例外是 <a href="commands/MsgBox.htm">MsgBox</a>，它里面的逗号不需要进行转义.另一个例外是在任意命令最后一个参数中的逗号: 它们不需要进行转义. 请参阅 <a href="commands/_EscapeChar.htm">#EscapeChar</a> 了解转义序列的完整列表.</p>
<p>某些特殊字符也需要使用转义序列的方法生成. 最常见的有 <code>`t</code>（tab）、<code>`n</code>（换行）和 <code>`r</code>（回车）.</p>
<p>提示: 任何命令中的首个逗号可以省略 (除非首个参数为空或以 := 或 = 开始, 或命令单独处于 <a href="#continuation">延续片段</a> 的顶部). 例如：</p>
<pre>MsgBox This is ok.
MsgBox<strong>,</strong> This is ok too (it has an explicit comma).</pre>
<h2 id="Comments">在脚本中添加注释</h2>
<p>在行首使用分号可以注释当前行脚本. 例如：</p>
<pre><em>; 这整行是注释.</em></pre>
<p>也可以在命令的末尾添加注释, 此时分号左侧必须至少有一个空格或 tab. 例如：</p>
<pre>Run Notepad  <em>; 这是和命令在同一行的注释.</em></pre>
<p>此外, 可以使用 /* 和 */ 符号注释整块代码, <em>但仅当它们出现在行首时才有效</em>, 例如:</p>
<pre><em>/*
MsgBox, This line is commented out (disabled).
MsgBox, This one too. 
*/</em></pre>
<p>由于脚本运行时会忽略注释, 所以它们不会影响脚本性能或占用内存.</p>
<p>使用 <a href="commands/_CommentFlag.htm">#CommentFlag</a> 可以把默认的注释符 (分号) 改为其他字符或字符串.</p>
<h2 id="continuation">把过长的行分割成一系列短行</h2>
<p>可以把过长的行分割成一系列较短的行来提高可读性和可维护性. 这样不会降低脚本的执行速度, 因为在脚本启动时这些短行会在内存中合并起来.</p>
<p><strong>方法 #1</strong>: 以 "and", "or", ||, &amp;&amp;, 逗号或 <a href="Variables.htm#concat">句点</a> 开始的行会自动合并到其前一行 (在 v1.0.46+, 除了 ++ 和 -- 外其他所有的 <a href="Variables.htm#Operators">表达式运算符</a> 开头的行也会如此). 在下面的例子中, 第二行会自动附加到首行, 因为它以逗号开始:</p>
<pre>FileAppend, This is the text to append.`n   <em>; 这里可以使用注释.</em>
    <strong>,</strong> %A_ProgramFiles%\SomeApplication\LogFile.txt  <em>; 注释.</em></pre>
<p>同样地, 下列几行也会合并成单行, 因为最后两行以 "and" 或 "or" 开始:</p>
<pre>if (Color = "Red" or Color = "Green"  or Color = "Blue"   <em>; 注释.</em>
    <strong>or</strong> Color = "Black" or Color = "Gray" or Color = "White")   <em>; 注释.</em>
    <strong>and</strong> ProductIsAvailableInColor(Product, Color)   <em>; 注释.</em></pre>
<p><a href="Variables.htm#ternary">三元运算符</a> 也是个不错的选择:</p>
<pre>ProductIsAvailable := (Color = "Red")
    <strong>?</strong> false  <em>; 我们没有任何红色产品, 所以不用那么麻烦去调用函数.</em>
    <strong>:</strong> ProductIsAvailableInColor(Product, Color)</pre>
<p>尽管在上面的例子中缩进不是必须的, 但它可以显示出哪些行属于上一行从而提高代码清晰度. 并且, 可以不必在单词 "AND" 和 "OR" 开始的行加上额外的空格; 程序会自动处理这些. 最后, 可以在上面例子中任意行的末尾或行与行之间添加空行或 <a href="#Comments">注释</a>.</p>
<p><strong>方法 #2</strong>: 这种方法用于合并大量的行或不适合方法 #1 处理的行. 此方法对 <a href="Hotstrings.htm">自动替换热字串</a> 特别有用, 但它也可以用于命令或 <a href="Variables.htm#Expressions">表达式</a>中. 例如：</p>
<pre><em>; 示例 #1:</em>
Var =
(
Line 1 of the text.
Line 2 of the text. By default, a linefeed (`n) is present between lines.
)

<em>; 示例 #2:</em>
FileAppend<strong>,</strong>  <em>; 此时逗号是不能缺少的.</em>
(
A line of text.
<i>By default</i>, the hard carriage return (Enter) between the previous line and this one will be written to the file as a linefeed (`n).
    <i>By default</i>, the tab to the left of this line will also be written to the file (the same is true for spaces).
<i>By default</i>, variable references such as %Var% are resolved to the variable's contents.
), C:\My File.txt</pre>
<p>在上面的例子中, 几行代码被一对圆括号包围起来. 这被称为 <em>延续片段</em>. 注意在底行的闭括号后面跟着 <a href="commands/FileAppend.htm">FileAppend</a> 的最后一个参数. 这种做法是可选的; 这样做是为了确保逗号被视为参数分隔符而不是原义的逗号.</p>
<p>通过在延续片段的开括号右侧包含一个或多个下列选项, 可以覆盖它的默认特性. 如果含有多个选项, 那么选项之间使用空格分开. 例如：<code>( LTrim Join| %</code>.</p>
<p><strong><a name="Join"></a>Join</strong>: 指定行与行之间连接的方式. 如果省略此选项, 那么除最后一行外的其他行后面都会跟一个换行符 (`n). 如果指定单词 <em>Join</em> 自身, 则行与行之间直接连接而不添加任何字符. 或者在单词 <em>Join</em> 后可以紧跟着多达 15 个字符.例如，<code>Join`s</code> 会在除最后一行外的每行末尾插入一个空格（“`s”表示原义的空格，这是一个只能被 <em>Join</em> 识别的特殊转义序列）.另一个例子是 <code>Join`r`n</code>，它会在行与行之间插入 CR+LF.同样地，<code>Join|</code> 会在行之间插入管道符.要让延续片段的最后一行也以连接字符串结尾, 需要在它的闭括号上一行添加一个空行.</p>
<p>已知限制: 如果单词Join后面紧跟一个冒号，那么冒号不能是这一行的最后一个. 因为 <code>(Join:</code> 将被当做一个名为 Join 的标签对待，所以不支持 <code>(LTrim Join:</code> 这种写法, 而 <code>(Join: C</code> 这种写法没有问题.</p>
<p><strong><a name="LTrim"></a>LTrim</strong>: 删除每行开头的空格和 tab. 主要用来允许延续片段使用缩进. 此外，通过在一行中指定 <code>#LTrim</code> 自身可以为多个延续片段打开此选项.<code>#LTrim</code> 跟位置有关:会影响它下面的所有延续片段.使用 <code>#LTrim Off</code> 可以关闭此设置.</p>
<p><strong>RTrim0</strong> (RTrim 后跟着一个零): 关闭自动删除每行末尾的空格和 tab 的设置.</p>
<p><strong><a name="CommentOption"></a>Comments</strong>（或 <strong>Comment</strong> 或 <strong>Com</strong> 或 <strong>C</strong>) <span class="ver">[v1.0.45.03+]</span>：允许在延续片段中使用<a href="#Comments">分号注释</a>（但不支持 <code>/*..*/</code>）.这样的注释 (以及它们左边的空格和 tab) 会在连接时完全被忽略而不是当成原义文本处理. 每个注释可以放在一行的右侧或单独一行.</p>
<p><strong>%</strong> (百分号): 把百分号视为原义字符而不是变量引用. 这样就不需要把每个百分号 <a href="commands/_EscapeChar.htm">转义</a> 成原义字符. 在百分号已经为原义的地方不需要使用此选项, 例如 <a href="Hotstrings.htm">自动替换热字串</a>.</p>
<p><strong>,</strong> (逗号): 把逗号作为分隔符而不是原义逗号. 这个非常少用的选项只有在命令的参数之间才需要, 因为在 <a href="Functions.htm">函数调用</a> 中逗号的类型没有影响. 并且, 此选项只会转换那些真正的分隔参数的逗号. 换句话说, 一旦到了命令的最后一个参数 (或者命令没有参数), 那么会忽略此选项而把后续的逗号当成原义逗号.</p>
<p><a name="accent"></a><strong>`</strong> (重音符): 把每个反引号视为原义字符而不是 <a href="commands/_EscapeChar.htm">转义符</a>. 此选项同时也避免了需要分别对逗号和百分号进行明确地转义. 此外, 它还阻止对任何特定的转义序列例如 `r 和 `t 进行转义.</p>
<p><a name="non-continuation"></a><strong>)</strong> <span class="ver">[v1.1.01+]</span>: 如果一个右括号出现在延续代码的参数中(除了作为 <a href="#Join">Join</a> 的选项参数), 那么这一行将重新解释为一个表达式，而不是作为一段延续代码的开始. 这将避免类似 <code>(x.y)[z]()</code> 的表达式需要对左括号进行转义.</p>
<p><u>备注</u></p>
<p>当没有指定 <a href="#accent">重音符 (`) 选项</a> 时, 支持在延续片段中使用 <a href="commands/_EscapeChar.htm">转义序列</a>, 例如 `n (换行) 和 `t (tab).</p>
<p>没有使用 <a href="#CommentOption">注释选项</a> 时, 不支持在延续片段中使用分号和 /*..*/ 添加注释, 因为它们会被视为原义文本. 不过, 可以在片段的底行和顶行添加注释. 例如：</p>
<pre>FileAppend<strong>,</strong>   <em>; 注释.
; 注释.</em>
( LTrim Join    <em>; 注释.</em>
    &nbsp;; This is <strong>not</strong> a comment; it is literal. Include the word <i>Comments</i> in the line above to make it a comment.
), C:\File.txt   <em>; 注释.</em></pre>
<p>由上面可知, 延续片段中的分号不需要进行 <a href="commands/_EscapeChar.htm">转义</a>.</p>
<p>使用延续片段无法生成总长度超过 16,383 字符的行 (如果尝试这么做, 那么程序在启动时会弹出警告). 解决此问题的一种方法是把一系列内容连接到变量中. 例如：</p>
<pre>Var =
(
...
)
Var = %Var%`n  <em>; 通过另一个延续片段添加更多文本到此变量中.</em>
(
...
)
FileAppend, %Var%, C:\My File.txt</pre>
<p>因为闭括号表示延续片段的结束，所以要让某一行以原义的闭括号开头，需要在其前面加上重音符/反引号：<code>`)</code>.</p>
<p>一个延续片段后面可以紧跟着包含另一个延续片段的开括号的一行. 这样使得上面提到的选项可以在创建单行的过程中进行改变.</p>
<p>不支持通过 <a href="commands/_Include.htm">#Include</a> 的方法把延续片段各部分连接起来.</p>
<h2 id="ahk2exe">把脚本转换成 EXE (ahk2exe)</h2>
<p>程序中已包含了脚本编译器 (感谢 fincs 提供).</p>
<p>脚本编译完成后，就成了一个独立的可执行文件；也就是说，它甚至可以在没有安装 AutoHotkey 的机器上运行（并且这样的可执行文件可以无限制地发布或出售）.编译过程中会创建一个包含下列文件的可执行文件: AutoHotkey 解释器, 脚本需要<a href="commands/_Include.htm">加载</a>的任何文件以及通过 <a href="commands/FileInstall.htm">FileInstall</a> 命令合并的任何文件.</p>
<p>使用 Ahk2Exe 有下列几种方式:</p>
<ol>
  <li><strong>GUI 界面</strong>: 运行菜单菜单中的 "Convert .ahk to .exe" 菜单项.</li>
  <li><strong>右键点击</strong>: 在资源管理器中, 您可以在任何一个 .ahk 上右键点击并选择 "Compile Script" (只有在安装 AutoHotkey 时选择了脚本编译器时时才可用). 这样创建了与脚本具有相同的主文件名的 EXE 文件, 它会在稍后出现在相同目录中. 注: 这样生成的 EXE 文件会使用与前面的方法 #1 最后一次使用时相同的自定义图标, .bin 文件以及 MPRESS 设置.</li>
  <li><a name="ahk2exeCmd"></a><strong>命令行</strong>: 编译器可以使用下列参数在命令行中运行:
  <pre>Ahk2Exe.exe /in MyScript.ahk [/out MyScript.exe] [/icon MyIcon.ico] [/bin AutoHotkeySC.bin] [/mpress 0or1]</pre>
  例如：
<pre>Ahk2Exe.exe /in "MyScript.ahk" /icon "MyIcon.ico"</pre>
用法:
<ul>
<li>含有空格的参数应该包围在双引号中.</li>
<li>如果省略了 "out" 文件, 则使用脚本的主文件名作为 EXE 的主文件名.</li>
</ul></li>
</ol>
<p>注意:</p>
<ul>
  <li>进行编译通常并不会提升脚本的性能.</li>
  <li>截至 v1.1.01, 还不支持密码保护和 /NoDecompile 选项.</li>
  <li>如果在 AutoHotkey 安装目录的 "Compiler" 子文件夹中含有 <a href="http://www.matcode.com/mpress.htm">mpress.exe</a>, 则会使用它压缩脚本的可执行文件, 除非通过 <code>/mpress 0</code> 或 GUI 设置把它禁用了. 这样同时压缩了脚本的源代码 (删除了所有注释), 其中的源码可以使用 PE 资源编辑器从可执行文件中提取.</li>
  <li>命令 <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> 和 "<a href="commands/Menu.htm">Menu, Tray, ShowMainWindow</a>" 会影响已编译脚本的行为.</li>
  <li>使用类似 Resource Hacker (免费软件) 的工具编辑 "AutoHotkeySC.bin" 文件可以给已编译脚本添加自定义版本信息 (和在资源管理器的文件属性对话框中看到的那些). 此文件包含在 AutoHotkey 安装目录的 "Compiler" 子文件夹中. 可以使用 <a href="http://www.autohotkey.com/forum/topic22975.html">Compile_AHK II</a> 简化这个过程. 截至 v1.1.01, 可以直接编辑已编译脚本而不是 AutoHotkeySC.bin.</li>
  <li>还可以使用上面的方法改变所有已编译脚本现有的图标或为它们添加新图标.</li>
  <li>如果脚本以编译的形式运行, 则内置变量 A_IsCompiled 的值为 1. 否则为空.</li>
  <li>传递参数到 Ahk2Exe 后, 它会在标准输出中写入表示编译过程成功与否的消息. 尽管此消息不会显示在命令提示符中, 但可以通过像重定向到文件的方法 "捕获". <span class="ver">[v1.0.43+]</span></li>
  <li>另外，当编译出错时，Ahk2Exe还能返回退出代码，它可以指示编译的错误类型.错误类型更多信息请访问 <a href="https://github.com/fincs/Ahk2Exe/blob/master/ErrorCodes.md">GitHub (ErrorCodes.md)</a>. <span class="ver">[v1.1.22.03+]</span></li>
</ul>
<p>编译器的源码和新版本可以在 <a href="https://github.com/fincs/Ahk2Exe">GitHub</a> 找到.</p>

<h2 id="cmd">向脚本传递命令行参数</h2>
<p>脚本支持命令行参数. 格式为:</p>
<pre>AutoHotkey.exe [<i>Switches</i>] [<i>Script Filename</i>] [<i>Script Parameters</i>]</pre>
<p>对于已编译脚本, 格式为:</p>
<pre>CompiledScript.exe [<i>Switches</i>] [<i>Script Parameters</i>]</pre>
<p><strong>Switches:</strong> 零个或多个下列开关:</p>
<table class="info">
  <tr><th>开关</th><th>释义</th></tr>
  <tr id="SlashF">
    <td>/f or /force</td>
    <td>无条件运行, 跳过任何警告对话框.</td>
  </tr>
  <tr id="SlashR">
    <td>/r或/restart</td>
    <td>脚本将会执行<a href="commands/Reload.htm">Reload</a> 命令.</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut</td>
    <td>把阻止脚本运行的语法错误发送到标准输出而不显示在对话框中. 请参阅 <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a> 了解详情.这可以联合/iLib来验证脚本而不用运行它.</td>
  </tr>
  <tr><th></th><th>不支持已编译脚本:</th></tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td><span class="ver">[AHK_L 11+]:</span> 连接到调试客户端. 想了解更多细节, 请参阅 <a href="#idebug">交互调试</a>.</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td><span class="ver">[AHK_L 51+]:</span> 覆盖用于读取脚本文件的默认代码页.想了解更多信息, 请参阅 <a href="#cp">脚本文件代码页</a>.</td>
  </tr>
  <tr>
    <td>/iLib <em>"OutFile"</em></td>
    <td>
      <p><span class="ver">[v1.0.47+]:</span> AutoHotkey加载但不运行脚本. 每个脚本会自动include <a href="Functions.htm#lib">函数库</a>,两行代码会写到OutFile里面，就像下面一样：:</p>
<pre>#Include LibDir\
#IncludeAgain LibDir\LibFile.ahk</pre>
      <p>如果输出文件存在会被覆盖. <em>可以使用</em> <code>*</code>输出到stout.</p>
      <p>如果脚本语法错误，那么输出脚本也许就为空. 程序错误代码可以检测这种情况; 如果这里有语法错误，错误代码就是2. /ErrorStdOut可以用来捕获错误信息.</p>
    </td>
  </tr>
</table>

<p><a name="defaultfile"></a><strong>Script Filename:</strong>如果不含 <em>Script Parameters</em>, 那么此参数可以省略. 省略时, 它会运行 (或提示您创建) 下列默认位置的其中一个文件:</p>
<ul>
  <li><a href="Variables.htm#AhkPath">AutoHotkey执行程序目录</a>.</li>
  <li><a href="Variables.htm#MyDocuments">我的文档</a>.</li>
</ul>
<p><code><i>AutoHotkey</i>.ahk</code>的文件名取决于Autohotkey的文件名.例如重命名AutoHotkey.exe成MyScript.exe, 它会尝试打开<code>MyScript.ahk</code>. 如果你运行AutoHotkeyU32.exe没有参数则会运行AutoHotkeyU32.ahk.</p>
<p>备注:在早期版本 <a href="AHKL_ChangeLog.htm#L51">revision 51</a>, 程序会在工作目录寻找AutoHotkey.ini或者我的文档下的AutoHotkey.ahk.</p>
<p><span class="ver">[v1.1.17+]:</span> 星号(*)加在文件名上会打开标准输入通道(stdin)的脚本. 例如<a href="commands/Run.htm#ExecScript">ExecScript()</a>.</p>
<p><strong>脚本参数:</strong>你想要传递给脚本的参数用空格分隔. 单个参数如果包含空格需要在两端加上<strong>&quot;</strong>. 如果参数本身包含<strong>&quot;</strong>则需要转义 (\&quot;). 如果参数末尾是\则可能会被转义(例如&quot;C:\My Documents<span class="red">\&quot;</span>)会被视为引号(就是说脚本会接收到C:\My Documents<span class="red">&quot;</span>).要移除引号，使用<code><a href="commands/StringReplace.htm">StringReplace, 1, 1, <span class="red">&quot;</span>,, All</a></code>.</p>
<p>脚本内收的参数<a href="Variables.htm">变量</a>会是%1%, %2%等等. %0%包含参数个数. 然而在表达式中1、2等会被视为数字而不是变量. 下面的例子展示了传入参数:</p>
<pre>if 0 &lt; 3  <em>; 左边的 <a href="commands/IfEqual.htm">non-expression if-statement</a> 始终是变量名.</em>
{
    MsgBox 脚本需要至少3个参数，但实际只接收到%0%个.
    ExitApp
}</pre>
<p>如果传递给脚本的参数数目不确定 (可能由于用户拖放一组文件到脚本上), 可以使用下面的示例逐个提取这些参数:</p>
<pre>Loop, %0%  <em>; 对每个参数进行循环:</em>
{
    param := %A_Index%  <em>; 取得名称为 A_Index 的值的变量中的内容.</em>
    MsgBox, 4,, Parameter number %A_Index% is %param%.  Continue?
    IfMsgBox, No
        break
}</pre>
<p>如果这些参数是文件名，那么可以使用下列的例子把它们转换到大小写正确的长名称（与文件系统中存储的一致），其中包含完整/绝对的路径.</p>
<pre>Loop %0%  <em>; 对每个参数 (或放到脚本上的文件) 进行循环:</em>
{
    GivenPath := %A_Index%  <em>; 取得名称为 A_Index 变量中的内容.</em>
    Loop %GivenPath%, 1
        LongPath = %A_LoopFileLongPath%
    MsgBox The case-corrected long path name of file`n%GivenPath%`nis:`n%LongPath%
}</pre>
<p>已知限制: 如果 NTFS 文件系统中关闭了 8.3 (短) 文件名, 那么拖拉文件到 .ahk 脚本上可能无法正常工作. 一种解决方法是 <a href="#ahk2exe">编译</a> 脚本, 然后拖拉文件到生成的 EXE 文件上.</p>

<h2 id="cp">脚本文件代码页 <span class="ver">[AHK_L 51+]</span></h2>
<p>用来加载脚本的代码页决定了脚本中可以使用的字符.</p>
<ul>
  <li>如果文件以 UTF-8 或 UTF-16 (LE) 字节顺序标记开头, 则会忽略 <a href="#CPn">/CP<i>n</i></a> 开关并为其使用适合的代码页.</li>
  <li>如果在命令行中传递了 <a href="#CPn">/CP<i>n</i></a> 开关, 则使用代码页 <i>n</i>. 想了解有效的数值代码页标识符, 请参阅 <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">MSDN</a>.</li>
  <li>在其他所有情况中使用系统默认的 ANSI 代码页.</li>
</ul>
<p>注意这仅适用于 AutoHotkey 加载脚本的时候, 而不包括脚本自身的文件 I/O. <a href="commands/FileEncoding.htm">FileEncoding</a> 决定了脚本读取或写入文件时使用的默认编码, 然而 <a href="commands/IniRead.htm">IniRead</a> 和 <a href="commands/IniWrite.htm">IniWrite</a> 总是使用 UTF-16 或 ANSI.</p>
<p>由于所有的文本都被转换 (必要时) 为 <a href="Compat.htm#Format">原生的字符串格式</a>, 所以无效的或不存在于原生代码页中的字符会被替换为占位符: ANSI '?' 或 Unicode '?'. 在 Unicode 版本中, 这种情况只可能在脚本文件编码错误或用于保存和读取脚本的代码页不一致时发生.</p>
<p>可以使用 <a href="commands/RegWrite.htm">RegWrite</a> 为资源管理器中运行的脚本设置默认代码页 (例如双击脚本文件时):</p>
<pre><em>; 取消对下面适当的行的注释或让它们都保留注释
;   以重新设置为当前版本的默认代码页.  需要时进行修改:
; codepage = 0        ; 系统默认的 ANSI 代码页
; codepage = 65001    ; UTF-8
; codepage = 1200     ; UTF-16
; codepage = 1252     ; ANSI Latin 1; 西欧 (Windows)</em>
if (codepage != "")
    codepage := " /CP" . codepage
cmd="%A_AhkPath%"%codepage% "`%1" `%*
key=AutoHotkeyScript\Shell\Open\Command
if A_IsAdmin    <em>; 为所有用户进行设置.</em>
    RegWrite, REG_SZ, HKCR, %key%,, %cmd%
else            <em>; 仅为当前用户进行设置.</em>
    RegWrite, REG_SZ, HKCU, Software\Classes\%key%,, %cmd%</pre>
<p>这里假定已经安装了 AutoHotkey.如果没有, 则结果可能不理想.</p>

<h2 id="debug">调试脚本</h2>
<p><a href="commands/ListVars.htm">ListVars</a> 和 <a href="commands/Pause.htm">Pause</a> 等命令可以帮助您调试脚本. 例如, 把下面这两行临时插入精心选择的位置时, 可以在脚本中创建 "断点":</p>
<pre>ListVars<br>Pause</pre>
<p>当脚本执行到这两行时, 会显示所有变量当前包含的内容供你检查. 当你准备恢复时, 可以通过 File 或托盘菜单取消暂停. 然后脚本会继续执行，直到遇到下一个“断点”（如果有）.</p>
<p>通常最好把这些 "断点" 插入到活动窗口对当前脚本没有影响的位置, 例如 WinActivate 命令的前一行. 这样当您取消暂停时脚本才可以正确恢复操作.</p>
<p>下列命令也可以用于调试: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a> 和 <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
<p>一些常见错误, 例如拼写错误或忘记 "global" 声明时, 可以使用 <a href="commands/_Warn.htm">启用警告</a> 检测到.</p>
<h3 id="idebug">交互调试 <span class="ver">[AHK_L 11+]</span></h3>
<p>通过受支持的 <a href="AHKL_DBGPClients.htm">DBGp 客户端</a> 可以进行交互调试. 一般支持下列操作:</p>
<ul>
  <li>设置和移除断点 - 遇到 <a href="http://en.wikipedia.org/wiki/Breakpoint">断点</a> 时暂停执行.</li>
  <li>单步调试代码 - 逐语句, 逐过程或跳出函数和子程序.</li>
  <li>检查所有变量或特殊变量.</li>
  <li>查看正在运行的子程序和函数的堆栈.</li>
</ul>
<p>注意在已编译脚本中没有提供此功能.</p>
<p>要启用交互调试, 首先要运行受支持的调试器客户端, 然后使用命令开关 <b>/Debug</b> 运行脚本.</p>
<pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
<p><i>SERVER</i> 和 <i>PORT</i> 可以省略. 例如, 下面的方式是等同的:</p>
<pre>AutoHotkey /Debug "myscript.ahk"
AutoHotkey /Debug=localhost:9000 "myscript.ahk"</pre>
<p id="debug_attach"><span class="ver">[AHK_L 59+]:</span> 要向已经在运行的脚本附加调试器, 请向脚本发送消息, 如下所示:</p>
<pre>ScriptPath = <em>; 设置此变量为脚本的完整路径</em>
DetectHiddenWindows On
ifWinExist %ScriptPath% ahk_class AutoHotkey
    <em>; 可选参数:
    ;   wParam  = 调试器客户端的 IPv4 地址, 相当于 32 位整数.
    ;   lParam  = 调试器客户端的监听端口.</em>
    PostMessage DllCall("RegisterWindowMessage", "str", "AHK_ATTACH_DEBUGGER")
</pre>
<p>当调试器连接后, 通过发送 "detach" DBGp 命令可以在不终止脚本的情况下分离调试器.</p>

<h2 id="port">AutoHotkey.exe 的可移植性</h2>
<p>运行任何的 .ahk 脚本的所有需要只是 AutoHotkey.exe 文件.</p>
<p><span class="ver">[AHK_L 51+]:</span> 重命名 AutoHotkey.exe 会同时改变它 <a href="#defaultfile">默认</a> 运行的脚本, 这是在没有安装 AutoHotkey 的计算机上运行脚本的一种可选方法. 例如, 没有指定文件名执行 <i>MyScript</i>.exe 时会自动运行 <i>MyScript</i>.ahk , 但也能运行其他脚本.</p>
<h2 id="install">安装选项</h2>
<p>要静默安装 AutoHotkey 到默认目录（这与手动安装时显示的目录相同），需要向安装程序传递 /S 参数.例如：</p>
<pre>AutoHotkey110800_Install.exe /S</pre>
<p>使用参数 /D 可以指定默认目录外的其他目录作为安装目录 (如果没有使用 /S, 那么这样可以改变在安装程序中显示的默认目录). 例如：</p>
<pre>AutoHotkey110800_Install.exe /S /D=C:\Program Files\AutoHotkey</pre>
<p>如果之前已经安装了 AutoHotkey， 则安装程序会自动检测 AutoHotkey.exe 的构建并设置为默认构建.否则，根据操作系统是否为 64 位设置默认构建为 Unicode 32 位或 Unicode 64 位.要覆盖 AutoHotkey.exe 的默认构建设置，请使用下列的其中一个开关：</p>
<ul>
  <li><code>/A32</code> 或 <code>/ANSI</code>：ANSI 32 位.</li>
  <li><code>/U64</code> 或 <code>/x64</code>：Unicode 64 位（仅在 64 位系统中有效）.</li>
  <li><code>/U32</code>：Unicode 32 位.</li>
</ul>
<p>例如，下面的命令会静默安装并设置 ANSI 32 位为默认的构建：</p>
<pre>AutoHotkey110800_Install.exe /S /A32</pre>
<p>要静默卸载 AutoHotkey，需要向 Installer.ahk 传递 <code>/Uninstall</code> 参数.例如：</p>
<pre>"C:\Program Files\AutoHotkey\AutoHotkey.exe" "C:\Program Files\AutoHotkey\Installer.ahk" /Uninstall</pre>
<p>对于 1.1.08.00 以前的 AutoHotkey 版本，请使用 <code>uninst.exe /S</code>.例如：</p>
<pre>"C:\Program Files\AutoHotkey\uninst.exe" /S</pre>
<p><strong>注：</strong>Installer.ahk 需要管理员权限才能正常运行.</p>
<p>以后版本的安装包在右下角包含了用来提取安装文件而不进行安装的链接.如果存在这个功能，则可以在命令行中使用 <code>/E</code> 开关来调用它.例如：</p>
<pre>AutoHotkey110903_Install.exe /D=F:\AutoHotkey /E</pre>
<p>在静默安装/卸载模式下，运行的脚本在必要时会自动关闭. 通过使用 <code>/R</code> 开关 (需要v1.1.19.02+) 在使用<strong>不带</strong>>命令行参数的EXE程序中实现自动重新加载脚本. 不过使用Installer.ahk改变设置时，这个选项暂不支持.</p>

<h2>脚本展示</h2>
<p>请参阅 <a href="scripts/">此页面</a> 了解一些有用的脚本.</p>
</body>
</html>
