<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="gb2312" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<!--Tutorial by tidbit, from http://ahkscript.github.io/AHK_Tutorial/
				Modified to fit with the AutoHotkey documentation.-->
		<meta name="author" content="tidbit" />
		<meta name="description" content="An AutoHotKey tutorial written by tidbit"/>
		<meta name="keywords" content="ahk, autohotkey, tutorial, beginners guide"/>
		<title>AutoHotkey初学者向导</title>
		<link href="static/theme.css" rel="stylesheet" type="text/css" />
		<script src="static/content.js" type="text/javascript"></script>
		<style type="text/css">
		.key
		{
			background-color: #f7f7f7;
			border: 1px solid #ccc;
			border-radius: 3px;
			box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 0 0 2px #fff inset;
			color: #333;
			display: inline-block;
			font-size: 90%;
			line-height: 1.4;
			margin: 0 0.1em;
			padding: 0.1em 0.5em;
			text-shadow: 0 1px 0 #fff;
			white-space: nowrap;
		}
		.indented {
			text-indent: 1.5em;
			margin-bottom: 1em;
		}
		</style>
	</head>
	<body>
		<div class="page">
			<h1>AutoHotkey初学者向导<span style="opacity:0.4">by tidbit</span></h1>
			<div id="toc" class="section">
				<h3>索引</h3>
				<ol>
					<li><a href="#s1" class="toci">基础</a>
						<ol>
							<li><a href="#s11" class="toci">下载AutoHotkey</a></li>
							<li><a href="#s12" class="toci">如何创建一个脚本</a></li>
							<li><a href="#s13" class="toci">你不能合并命令</a></li>
							<li><a href="#s14" class="toci">其他基本信息</a></li>
						</ol>
					</li>
					<li><a href="#s2" class="toci">热键和热字串</a>
						<ol>
							<li><a href="#s21" class="toci">键和符号</a></li>
							<li><a href="#s22" class="toci">徽标键</a></li>
							<li><a href="#s23" class="toci">一个脚本里使用多个热键/热字串</a></li>
							<li><a href="#s24" class="toci">示例</a></li>
						</ol>
					</li>
					<li><a href="#s3" class="toci">发送按键</a>
						<ol>
							<li><a href="#s31" class="toci">游戏</a></li>
						</ol>
					</li>
					<li><a href="#s4" class="toci">运行程序和网页</a></li>
					<li><a href="#s5" class="toci">命令和函数</a>
						<ol>
							<li><a href="#s51" class="toci">代码块</a></li>
						</ol>
					</li>
					<li><a href="#s6" class="toci">变量</a>
						<ol>
							<li><a href="#s61" class="toci">什么时候使用百分号</a></li>
							<li><a href="#s62" class="toci">获取用户输入</a></li>
							<li><a href="#s63" class="toci">其他示例</a></li>
						</ol>
					</li>
					<li><a href="#s7" class="toci">对象</a>
						<ol>
							<li><a href="#s71" class="toci">创建对象</a></li>
							<li><a href="#s72" class="toci">使用对象</a></li>
						</ol>
					</li>
					<li><a href="#s8" class="toci">其他有用的东西</a>
						<ol>
							<li><a href="#s81" class="toci">神秘的 []</a></li>
							<li><a href="#s82" class="toci">查找你的AHK版本</a></li>
							<li><a href="#s83" class="toci">尝试与错误</a></li>
							<li><a href="#s84" class="toci">缩进</a></li>
							<li><a href="#s85" class="toci">寻求帮助</a></li>
							<li><a href="#s86" class="toci">其他链接</a></li>
						</ol>
					</li>
				</ol>
			</div>
			<div id="bodyContent">
				<div id="basics" class="section">
					<h2 id="s1">1 - 基础</h2>
					<p class="note">
						在我们开始我们的旅程之前，让我给你一些建议吧。
						在本向导中，你会看到大量的文字和大量代码。<br />
						为了更有效的学习，建议你阅读这些文字并尝试这些代码。
						<br />你可以复制并粘贴此页上的大多数示例。
						<br />如果你弄糊涂了，试着再看一遍。
					</p>

					<h3 id="s11">a. 下载并安装AutoHotkey</h3>

					<script type="text/javascript">
					if ('file:mk:ms-its:'.indexOf(location.protocol) != -1)
						document.write('<p class="note">' + translate.tutLocalMessage + '</p>');
					</script>
					<p>
					在学习使用AutoHotkey (AHK)之前, 你需要下载它。下载后，你可能会需要安装。
					 但这取决于你想要的版本。
						对于本指南，我们将使用安装程序，因为它是最容易设置的。
					</p>


					<h3>文字说明:</h3>
					<ol>
						<li>访问AutoHotkey主页
							<a href="http://ahkscript.org/">http://ahkscript.org/</a>
						</li>
						<li>点击下载:
							<a href="http://ahkscript.org/download/ahk-install.exe">http://ahkscript.org/download/ahk-install.exe</a>
						</li>
						<li>
							在安装Autohotkey过程中，你会被询问安装UNICODE或者ANSI版本. 简而言之，如果你想选择UNICODE. 它会支持非英文字符和数字. 一直下一步直到你看到安装（Install）按钮.
						</li>
						<li>装完了？棒极了！我们接着看到 b.</li>
					</ol>
					<p class="note">视频介绍:<br />
						Frankie的 "Install and Hello World"<br />
						<a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>
					</p>

					<h3 id="s12">b. 如何创建一个脚本</h3>
					<p>
						装完Autohotkey后，你也许会想它能做些什么. AutoHotkey不是黑魔法，虽然我也想. 所以我们要告诉他要去干什么.
						这个过程叫做 "写脚本".
					</p>

					<h3>文字说明:</h3>
					<ul>
						<li>1. 右键桌面空白处.</li>
						<li>2. 点击"新建"菜单.</li>
						<li>3. 点击里面的"AutoHotkey Script".</li>
						<li>4. 给脚本命名. 备注: 文件名必须带.ahk后缀,例如MyScript.ahk</li>
						<li>5. 找到新建的脚本并右键点击它.</li>
						<li>6. 点击"Edit Script".</li>
						<li>7. 一个新窗口被弹出，也许是Notepad. 如果是这样就成功了!
						<hr />
						<p>
						所以现在你已经创建了一个脚本, 我们需要添加内容到文件中. 如果需要内置命令、函数和变量的列表，查看<a href="#s5">section 5</a>.<br />
						</p>
						<p>
							这是一个使用<a href="commands/Send.htm">Send</a>命令创建的一个包含热键的非常基础的脚本，它会打字当按下热键之后.
						</p>

<pre>
^j::
   Send, My First Script
Return
</pre>
						<p>
							我们将在稍后得到更深入的研究。在此之前，这里是上述代码的解释.<br />

							- 第一行. <code>^j::</code>是热键,<code>^</code>代表<span class="key">CTRL</span>, 
							<code>j</code> 是字母<span class="key">j</span>. 在<code>::</code> 左边的是你想要按下的热键.<br />

							- 第二行. <code>Send, My First Script</code> 是如何发送按键。 <code>SEND</code>是命令, 在逗号(,)之后的内容会被发送.<br />

							- 第三行. <code>Return</code>. Return将会成为你最好的朋友. 它从字面上停止代码的进一步，到下面的行。这将防止很多问题，当你开始有很多东西在你的脚本中的时候.
						</p>
						<hr />
						<li>8. 保存文件.</li>
						<li>9. 双击桌面上的文件来运行它, 打开记事本或者其他可以输入文字的地方然后按下<span class="key">Ctrl</span>+<span class="key">J</span>.</li>
						<li>10. 万岁！你的第一个脚本完成了。去获得一些奖励，然后返回阅读本教程的其余部分.</li>
					</ul>

					<p class="note">
						视频介绍:<br />
						Frankie'的"Install and Hello World"<br /><a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>

					</p>
					<h3 id="s13">c. 你不能合并命令</h3>
					<p>
						当你在写代码的时候，你可能会有强烈的冲动在同一行或每一个内部放几个命令，不要这样做. <a href="#s5">在 section 5</a> 我们将会讨论它为什么不工作， 如你所期望的，你可以做什么来代替。
					</p>

					<h3 id="s14">d. 其他基本信息</h3>
					<div>
						如何在您的计算机上找到帮助文件:<br />
						有几种方法可以做到这一点，我会假设你已经安装到默认位置。<br /><br />
						方案1:
						<ol>
							<li>找到开始菜单或屏幕上的开始按钮，通常在左下角.</li>
							<li>点击<b>程序</b>或者<b>所有程序</b>.</li>
							<li>在列表中查找<b>AutoHotkey</b>.</li>
							<li>你会看到<b>AutoHotkey Help File</b>. 点击它.</li>
							<li>完成!</li>
						</ol>
						方案:
						<ol>
							<li>去你的桌面.</li>
							<li>找到<b>我的电脑</b>或者<b>计算机</b>. 打开它.</li>
							<li>去包含<b>AutoHotkey</b>的硬盘里面. 可能是<b>C:\</b>盘.</li>
							<li>查找所有的<b>Program Files</b>文件夹里面有没有<b>AutoHotkey</b>.</li>
							<li>查找<b>AutoHotkey.chm</b> 或者一个叫Autohotkey并有着黄色问号在图标上面的文件.</li>
							<li>完成!</li>
						</ol>
					</div>
					<p class="note">
						其他链接:<br />
						<a href="http://ahkscript.org/docs/">文档</a><br />
						<a href="http://ahkscript.org/docs/commands/">命令列表</a><br />
						<a href="http://ahkscript.org/docs/Functions.htm#BuiltIn">函数</a><br />
						<a href="http://ahkscript.org/docs/Variables.htm">变量</a>
					</p>
				</div>
				<div id="hotkeys_and_hotstrings" class="section">
					<h2 id="s2">2 - Hotkeys &amp; Hotstrings</h2>

					<p>
						什么是热键？热键是一个热的按键，开个玩笑。热键是用来触发某些动作的键或组合键.<br />
						什么是热字串？热字串主要用于扩展你输入的缩写文字（自动替换），他也可以用来映射任何脚本动作.
					</p>

					<p>这是一个热键:</p>

<pre>
^j::
   Send, My First Script
Return
</pre>

					<p>这是一个热字串:</p>

<pre>
::ftw::Free the whales
</pre>

					<p>这两个例子的区别在于事件将会被触发在你按下热键<span class="key">CTRL &amp; J</span>时而热字串将会转换你输入的"ftw"为"Free the whales".</p>
					<p>
						<i>"那么，人们如何如自己创建热键?"</i>
						好问题. 热键是使用单对::创建的. 键或者组合键必须在<code>::</code><b>左边</b>. 代码跟在下面, 以<code>Return</code>结束.<br />
					</p>
					<p class="note">备注: 有例外，但这些往往导致多次的混乱。 它不会被涵盖在教程中，至少，现在不。</p>
<pre>
esc::
   MsgBox Escape!!!!
Return
</pre>
					<p>热字串在要触发的文本两边各有一对::. 替换文本在第二个::的<b>右边</b>.</p>
					<p>如上所述，热字串也可以启动脚本动作. 和热键一样能干好多事，真棒！</p>
<pre>
::btw::
   MsgBox You typed "btw".
Return
</pre>

					<p>
						要知道一个很好的事情是，你可以有一个热键，很多行代码，热字串，标签，和很多其他的事情我们还没谈论过。
					</p>

<pre>
^j::
   MsgBox Wow!
   MsgBox this is
   Run, Notepad.exe
   winactivate, Untitled - Notepad
   WinWaitActive, Untitled - Notepad
   send, 7 lines{!}{enter}
   sendinput, inside the ctrl{+}j hotkey
Return
</pre>

					<h3 id="s21">a. 键及其神秘的符号</h3>

					<div>
						你可能会想知道<i>"我怎么知道^代表CTRL?!"</i>. 好问题！为了帮助你学习^和其他符号的意思，注意看这个表:<br />
						<table class="info">
							<tr><th>符号</th><th>描述</th></tr>
							<tr><td><strong>#</strong></td><td>Win(Windows徽标键)</td></tr>
							<tr><td><strong>!</strong></td><td>Alt</td></tr>
							<tr><td><strong>^</strong></td><td>Control</td></tr>
							<tr><td><strong>+</strong></td><td>Shift</td></tr>
							<tr>
								<td>
									<strong>&amp;</strong>
								</td>
								<td>
									一个符号可以是任何两键或鼠标按键之间用来组合成一个自定义热键。.
								</td>
							</tr>
						</table>
						<p>
							<strong>
								(获悉更详细的符号列表, 查看<a href="Hotkeys.htm">热键</a>)
							</strong>
						</p>
					</div>
					<p>
						此外,这里有一个大多数能放在::左边的按键列表:<br /><a href="KeyList.htm">按键列表</a>
					</p>
					<p>
					你可以通过&在两个键之间定义两个自定义的键（除手柄键）作为组合键。在下面的例子中，你要按下<span class="key">Numpad0</span>然后按第二个键来触发热键:
					</p>

<pre>
Numpad0 &amp; Numpad1::
   MsgBox You pressed Numpad1 while holding down Numpad0.
Return

Numpad0 &amp; Numpad2::
	Run Notepad
Return
</pre>

					<p>
						但是现在你想知道热字串有没有什么酷酷的修饰符，有！<br />
						热字串的修饰符在第一个::之间，例如:
					</p>

<pre>
:*:ftw::Free the whales
</pre>

					<p class="note">
						需要看额外的热键和热字串的修饰符、信息和实例，访问:<br />
						<a href="Hotkeys.htm">热键</a><br />
						<a href="Hotstrings.htm">热字串</a>
					</p>
					<h3 id="s22">b. 窗口特殊热键/热字串</h3>

					<p>有时候你也许想要热键或热字串在某些特定窗口工作（或禁用）。要这样做，你可以使用#指令。</p>
					<p>#IfWinActive<br />
					#IfWinExist</p>
					<p>
						这些特殊的命令(技术上称为“指令”)创建上下文敏感的热键和热字串. 只需指定一个窗口标题。但在某些情况下，您可能需要指定一个窗口句柄，组，或类。这些都是高级的并涵盖更深入的，点这里：<a href="commands/_IfWinActive.htm">#IfWinActive</a>.
					</p>
<pre>
#IfWinActive Untitled - Notepad
#space::
   MsgBox You pressed Win+Spacebar in Notepad.
Return
#IfWinActive
</pre>
					<p>关闭的语境敏感性，指定任何#ifwin命令而让它的所有参数的空白。 例如:</p>
<pre>
<em>; Notepad</em>
#IfWinActive untitled - Notepad
!q::
   MsgBox, You pressed Alt and Q in Notepad.
Return
#IfWinActive

<em>; Any window that isn't Untitled - Notepad</em>
!q::
   MsgBox, You pressed Alt and Q in any window.
Return
</pre>
					<p>当#ifwin命令关闭（或在脚本中从未使用过），所有的热键和热字串是所有窗口启用。</p><br />
					<p>#ifwin命令位置：他们对所有在命令后的热键和热字串生效在脚本内.</p>

<pre>
<em>; Notepad</em>
#IfWinActive ahk_class Notepad
#space::
   MsgBox, You pressed Win+Spacebar in Notepad.
Return
::msg::You typed msg in Notepad
#IfWinActive

<em>; MSPaint</em>
#IfWinActive untitled - Paint
#space::
   MsgBox, You pressed Win+Spacebar in MSPaint!
Return
::msg::You typed msg in MSPaint!
#IfWinActive
</pre>
					<p class="note">查看更多深入的和相似的命令，查看<br />
					<a href="commands/_IfWinActive.htm">#IfWinActive</a></p>
					<h3 id="s23">c. 单个文件多热键和热字串</h3>			   
					<p>出于一些原因缠绕在人们的想法里，那么我要说清楚：Autohotkey支持任意数量的热键如你所想。无论是1个或者3252个（或更多）.</p>
<pre>
#i::
   run, http://www.google.com/
Return

^p::
   run, notepad.exe
Return

~j::
   send, ack
Return

:*:acheiv::achiev
::achievment::achievement
::acquaintence::acquaintance
:*:adquir::acquir
::aquisition::acquisition
:*:agravat::aggravat
:*:allign::align
::ameria::America
</pre>

					<p>上面的代码是完全可以接受的。多个热键，多热字串。所有在一个大的脚本文件。</p>


					<h3 id="s24">d. Examples</h3>
<pre>::btw::By the way                          <em>; 替换"btw"为"By the way"在你按<a href="commands/_Hotstring.htm">EndChar</a>.的时候</em>
:*:btw::By the way                         <em>; 替换"btw"为"By the way"而不需要EndChar</em>

^n::                                       <em>; Ctrl &amp; n Hotkey</em>
   run, notepad.exe                        <em>; Run the program notepad.exe when you press Ctrl &amp; n</em>
Return                                     <em>; This ends the hotkey. The code below this will not get triggered.</em>

^b::                                       <em>; Ctrl &amp; b Hotkey</em>
   send, {ctrl down}c{ctrl up}             <em>; Copies the selected text. ^c could be used as well, but this method is more secure.</em>
   SendInput, [b]{ctrl down}v{ctrl up}[/b] <em>; Wraps the selected text in bbcode (forum) Bold tags.</em>
Return                                     <em>; This ends the hotkey. The code below this point will not get triggered.</em>
</pre>

					<!-- PAGE 2 -->
					<!-- PAGE 2 -->
					<!-- PAGE 2 -->
				</div>
				<div id="sending_keystrokes" class="section">
					<h2 id="s3">3 - Sending key strokes</h2>
					<p>
						So now you decided that you want to send (type) keys to a 
						program. We can do that. Use the <a href="commands/Send.htm">Send</a> command. Send literally sends keystrokes, to simulate typing or pressing of keys.<br /><br />
						Before we get into things, here are some common issues 
						that people have:<br />
						Just like Hotkeys, Send has special keys too. <a href="commands/Send.htm">Lots and lots of them.</a><br />
						Here are the 4 most common symbols:
					</p>
					<div>
						<hr />
						<p><span class="red">!</span>: Sends the ALT key. For example, <em>Send This is text!a</em> would send the keys "This is text" and then press ALT+a. <strong>Note</strong>: !A produces a different effect in some programs than !a. This is because !A presses ALT+SHIFT+A and !a presses ALT+a. If in doubt, use lowercase.</p><p><span class="red">+</span>: Sends the SHIFT key. For example, <em>Send +abC </em>would send the text "AbC", and <em>Send !+a</em> would press ALT+SHIFT+a.</p><p><span class="red">^</span>: Sends the CONTROL (Ctrl) key. For example, <em>Send ^!a</em> would press CTRL+ALT+a, and <em>Send ^{Home}</em> would send CONTROL+HOME. <strong>Note</strong>: ^A produces a different effect in some programs than ^a. This is because ^A presses CONTROL+SHIFT+A and ^a presses CONTROL+a. If in doubt, use lowercase.</p><p><span class="red">#</span>: Sends the WIN key (the key with the Windows logo) therefore <em>Send #e</em> would hold down the Windows key and then press the letter "e".</p>
					</div>
					<p><i><strong>The next couple of paragraphs are talking about the <a href="commands/Send.htm">table on send page</a>.</strong><br /></i></p>
					<p class="note">
						Note:<br />This table <b>does not</b> apply to <a href="Hotkeys.htm">hotkeys</a>. Meaning, you do not wrap <span class="key">CTRL</span> or <span class="key">ENTER</span> (or any other key) inside {}'s when making a hotkey.
					</p><br />

					<div>
						An example showing what shouldn't be done to a hotkey:
<pre>
<em>; When making a hotkey...
; WRONG</em>
{LCtrl}::
   send, AutoHotkey
Return

<em>; CORRECT</em>
LCtrl::
   send, AutoHotkey
Return
</pre>
					</div>
					<hr />
					<div>
						<p>The gigantic table above shows pretty much every special key built-in to AHK. Such as: <code>{enter}</code> and <code>{space}</code>.<br />
						A common issue lots of people have is they assume that the curly brackets are put in the documentation pages just for fun. But in fact <b>they are needed</b>. It's how AHK knows that <code>{!}</code> means "exclamation point" and not "press the <span class="key">Alt</span> key". So please remember to check the table on the <a href="commands/Send.htm">send</a> page and make sure you have your brackets in the right places.</p>
<pre>
<em>; Notice the ! is in {}'s? That's because if it wasn't, AHK would
; press the ALT key.</em>
send, This text has been typed{!}
</pre>

<pre>
<em>; Same as above, but with the ENTER key. AHK would type out "enter" if ...
; ... it wasn't wrapped in {}'s.</em>
send, Multiple enter lines have enter been sent. <em>; WRONG</em>
send, Multiple{enter}lines have{enter}been sent. <em>; CORRECT</em>
</pre>
						<div>
							Another common issue is that people think that <b>everything</b> needs
							to be wrapped in brackets with the send command. That is FALSE. If 
							it's not in the chart, it does not need brackets. You do <b>not</b>
							need to wrap common letters, numbers or even some symbols (such as . 
							(period)) in {}'s.<br /> 
							Also, with the Send commands you are able to send more than 1 letter,
							number or symbol at a time. So no need for a bunch of Send commands 
							with 1 letter each.

<pre>
<em>; Don't wrap words or individual letters that are not in the table mentioned above.</em>
send, {a}       <em>; WRONG</em>
send, {b}       <em>; WRONG</em>
send, {c}       <em>; WRONG</em>
send, {a}{b}{c} <em>; WRONG</em>
send, {abc}     <em>; WRONG</em>
send, abc       <em>; CORRECT</em>
</pre>
						</div>
						<div>
							To hold down or release a key, enclose the key name in brackets and then use the word UP or DOWN.

<pre>
<em>; This is how you hold 1 key down and press another key (or keys).
; If 1 method doesn't work in your program, please try the other.</em>
send, ^s                     <em>; Both of these send CTRL+s</em>
send, {ctrl down}s{ctrl up}  <em>; Both of these send CTRL+s</em>
Send, {ctrl down}c{ctrl up}
Send, {b down}{b up}
Send, {TAB down}{TAB up}
Send, {Up down}  <em>; Press down the up-arrow key.</em>
Sleep, 1000      <em>; Keep it down for one second.</em>
Send, {Up up}    <em>; Release the up-arrow key.</em>
</pre>
						</div>
					</div>
					<div>
							But now you are wondering 
							<i>"How can I make my really long send commands readable?"</i>.
							Easy. Use what is known as a Continuation Section. Simply specify an 
							opening parenthesis on a new line, then your content, finally a closing 
							parenthesis on its own line. For more information, read about 
							<a href="Scripts.htm#continuation">Continuation Sections</a>.
<pre>
send,
(
Line 1
Line 2
Apples are a fruit.
)
</pre>

					</div>
					<p class="note">
						Note: There are several different forms of send. Each has their own special features. If one form of send does not work for your needs, try another type of send. Simply replace the commands name "send" with "sendPlay" or whatever you want.<br />
						Here are most ways to send text:<br />
						Send<br />
						SendRaw<br />
						SendInput<br />
						SendPlay<br />
						SendEvent<br />
						For more information on what each one does, <a href="commands/Send.htm">read this</a>.
					</p>
					<h3 id="s31">a. Games </h3>
					<p>
						<b><span style="color:red;">This is important!</span></b><br />
						A lot of games, especially modern ones, have cheat prevention software. 
						Things like GameGuard, Hackshield, PunkBuster and several others. 
						If a game has a cheat prevention system and your hotkeys,
						hotstrings and send commands do not work, you are out of luck.<br />
						Not only is bypassing these systems in violation of the games policies
						and will get you banned, they are complex to work around. 
						There are methods that can increase the chance of working in some games, but there is no 
						magical <i>"make it work in my game now!!!"</i> button. so try <b>ALL</b> 
						of these before giving up.<br />
					</p>

					<p>
						There are also known issues with DirectX. If you are having issues 
						and you know the game uses DirectX, try the stuff below. You should 
						also try running the game in Windowed Mode, if possible. That fixes 
						some DirectX issues.<br />
						More DirectX issues may occur when using pixel or image commands. 
						Colors might turn out black (0x000000) no matter the color you try 
						to get. That is another tricky thing to fix. Try running in Windowed Mode if you can.
					</p>
					<p>
						There is no single solution to make AutoHotkey work in all programs. 
					 If everything you try fails, it may not be possible to use AutoHotkey for your needs.
					</p>
					<div>
						<hr />
						From the <a href="FAQ.htm#games">FAQ</a> page:<br />
						Some games use DirectInput exclusively. As a side-effect, they might ignore all simulated keystrokes and mouse clicks. To work around this, try one of the following (or a combination):
						<ul>
							<li>Use <a href="commands/Send.htm#SendPlayDetail">SendPlay</a> via: 1) the SendPlay command; 2) using <a href="commands/SendMode.htm">SendMode</a> Play; and/or 3) the <a href="Hotstrings.htm#SendMode">hotstring</a> option SP.</li>
							<li>Increase <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>. For example:</li>
							<li><code>SetKeyDelay, 0, 50</code></li>
							<li><code>SetKeyDelay, 150, 150, Play</code></li>
							<li>Try <a href="commands/ControlSend.htm">ControlSend</a>, which might work in cases where the other Send modes fail.</li>
						</ul>
					</div>
					<!-- PAGE 3 -->
					<!-- PAGE 3 -->
					<!-- PAGE 3 -->
				</div>
				<div id="running_programs_and_websites" class="section">
					<h2 id="s4">4 - Running programs &amp; websites</h2>
					<div>
						To run a program such as <i>Mspaint.exe, Calc.exe, script.ahk</i> or even a folder, you can use the <a href="commands/Run.htm">Run</a> command. It can even be used to open URLs such as <a href="http://ahkscript.org/">http://ahkscript.org/</a> . If your computer is setup to run the type of program you want to run, it's very simple:

<pre>
<em>; Run a program. Note: most programs will require a FULL file path.</em>
Run, %A_ProgramFiles%\Some_Program\Program.exe

<em>; Run a website</em>
Run, http://ahkscript.org
</pre>
					</div>
					<div>
						There are some other advanced features as well, such as Command-Line parameters and CLSID.<br />
						If you want to learn more about that stuff, visit the <a href="commands/Run.htm">run page</a>.
						<br />
						Here are a few more samples:
<pre>
<em>; Several programs do not need a full path, such as Windows-standard programs.</em>
Run, Notepad.exe
Run, MsPaint.exe

<em>; Run the "My Documents" folder using the built-in <a href="Variables.htm#BuiltIn">AHK variable</a></em>
Run, %A_MyDocuments%

<em>; Run some websites</em>
Run, http://ahkscript.org
Run, http://www.google.com
</pre>
						<br />
						<p class="note">For more in-depth information and examples, check out:<br /><a href="commands/Run.htm">commands/Run.htm</a>.</p>
					</div>


					<!-- PAGE 4 -->
					<!-- PAGE 4 -->
					<!-- PAGE 4 -->
				</div>
				<div id="commands_vs_functions" class="section">
					<h2 id="s5">5 - Commands vs. Functions()</h2>
					<div>
						AutoHotkey has two main types of things used by the scripter to create code:<br />
						Commands and Functions()<br />
						<p class="note">Helpful links:<br />
							A list of all commands: <a href="commands/index.htm">commands/index.htm</a><br />
							A list of all built-in functions: <a href="Functions.htm#BuiltIn">Functions.htm#BuiltIn</a></p>
					</div>
					<h3>Commands</h3>
					<p>
						You can tell what a command is by looking at its syntax (the way it looks). Commands do not use parenthesis "()" around the parameters like functions do. So a command would look like this:<br />
						<code>Command, parameter1, parameter2, parameter3</code><br />

						<br />When using commands, you cannot squish other commands onto the same line as a previous command (exception:  <a href="commands/IfEqual.htm">ifEqual</a>).<br />
						You cannot put commands inside the parameters of other commands.
					</p>

<pre>
Msgbox, Hello Run, Notepad.exe   <em>; Wrong</em>
Msgbox, Hello, Run, Notepad.exe  <em>; Wrong</em>

Msgbox, Hello      <em>; Correct</em>
Run, Notepad.exe
</pre>

					Commands also differ from function in that they use "traditional syntax". Meaning: when you use a <code>variable</code>, you NEED to use %'s around it. <code>%variable%</code>. Any text and numbers do not need to be in "quotation marks". <code>This is some text</code>. Additionally, you cannot do math in the parameters, unlike functions().
					<p class="note">
						You can do math in parameters if you force an expression with a single <code>%</code>, but that will not be covered.
					</p>
					<h3>Functions</h3>
					<div>
						As stated above, functions are different because they use parenthesis. A typical function looks like:<br />
						<code>Function(parameter1, parameter2, parameter3)</code><br /><br />
						Functions have a few main differences:
						<ol>
							<li>
								You can do math in them.<br />
								-- <code>SubStr(37*12, 1, 2)</code><br />
								-- <code>SubStr(A_Hour-12, 2)</code>
							</li>
							<li>
								Variables do not need to be wrapped in percent signs.<br />
								-- <code>SubStr(A_Now, 7, 2)</code>
							</li>
							<li>
								Functions can go inside of functions.<br />
								-- <code>SubStr(A_AHKPath, inStr(A_AHKPath, "AutoHotkey"))</code>
							</li>
							<li>
								Text needs to be wrapped in quotes.<br />
								-- <code>SubStr("I'm scripting, awesome!", 16)</code>
							</li>
						</ol>

						Functions usually return a value differently than a command does. Commands need an <i>OutputVar</i> parameter, functions do not. The most common way to assign a variable to the value of a function is like so:<br />
						<code><span style="color:#ff4400"><b>MyVariable</b></span>:=Function(Parameters)</code>

<pre>
<span style="color:#ff4400"><b>MyVariable</b></span>:=SubStr("I'm scripting, awesome!", 16)
</pre>
					<p class="note">This isn't the only way, but it's the most common. You are assigning <code>MyVariable</code> to the value of the function (in this case, <code>SubStr(...)</code>) that is to the right of the :=.<br />
					<a href="Functions.htm">More about Functions</a></p>
					</div>
					<div>
						In short:

<pre>
<em>; These are commands</em>
Msgbox, This is some text.
StringReplace, Output, Input, AutoHotKey, AutoHotkey, ALL
SendInput, This is awesome{!}{!}{!}

<em>; These are Functions</em>
SubStr("I'm scripting, awesome!", 16)
FileExist(VariableContainingPath)
Output:=SubStr("I'm scripting, awesome!", 16)
</pre>

					</div>
					<h3 id="s51">a. Code blocks</h3>
					<p>
						<a href="commands/Block.htm">Code blocks</a> are little curly brackets (<b>{</b> and <b>}</b>) that are there to group a section of code together so that AutoHotkey knows it's one big family and that it needs to stay together. They are most often used with <i>If</i> and <i>Loop</i>s. Without them, only the first line in the block is called.<br /><br />
					</p>
					<div>
						In the following code, both lines are run only if var equals 5.
<pre>
if (var=5)
{
   MsgBox, var equals %var%!!
   Exitapp
}
</pre><br />

						In the following code, the msgbox is only shown if var equals 5. The code will always exit, even if var <b>isn't</b> 5.

<pre>
if (var=5)
   MsgBox, var equals %var%!!
   Exitapp
</pre><br />

						This is perfectly fine since the if only had 1 line of code associated with it. It's exactly the same as above, but I outdented the second line so we know it's separate from the if.

<pre>
if (var=5)
   MsgBox, var equals %var%!!
MsgBox, We are now 'outside' the if. We did not need {}'s since there was only 1 line below it.
</pre>
					</div>
					<!-- PAGE 5 -->
					<!-- PAGE 5 -->
					<!-- PAGE 5 -->
				</div>
				<div id="variables" class="section">
					<h2 id="s6">6 - Variables</h2>
					<p>
						<a href="Variables.htm">Variables</a> are like little post-it notes that hold some information. They can be used to store text, numbers, data from functions and commands or even mathematical equations. Without them, programming &amp; scripting would be much more tedious.
					</p>
					<hr />
					<div>
						Variables can be assigned a few ways, We'll cover the most common forms. Please pay attention to the equal sign (=).
						<ol>
							<li><code>variable=text</code><br />
								<div class="indented">This is the simplest form for a variable, traditional assignment. Simply type in your text and done.</div>
							</li>
							<li><code>variable=%variable2%</code><br />
								<div class="indented">Same as above, but you are assigning a variable to a different variables value.</div>
							</li>
							<li><code>variable:="text"</code><br />
								<div class="indented">This is an expression assignment, due to the : before the =. Any text needs to be in "quotes".</div>
							</li>
							<li><code>variable:=variable2</code><br />
								<div class="indented">In expression mode, variables do not need %'s.</div>
							</li>
							<li><code>variable:=6+8/3*2-sqrt(9)</code><br />
								<div class="indented">Thanks to expressions, you can do math!</div>
							</li>
						</ol>
						Number 1 &amp; 2 can be combined. <code>var=%var2% some text %var3%.</code><br />
						3, 4 &amp; 5 can be combined too. <code>var:="The value of 5+ " Variable " is: " 5+Variable</code>
					</div>
					<hr />

					<p class="note">
						Any equal sign (<b>=</b>) with a symbol in front of it is called an <b>Assignment Operator</b>, which are always an expression. So <code>:=</code> <code>+=</code> <code>-=</code> <code>.=</code> etc. always use expressions.
					</p>
					<h3 id="s61">a. When to use percents</h3>
					<p>
						One of the most common issues with AutoHotkey involving variables is when to use the percent signs (<b>%</b>). Hopefully this will clear some confusion.
					</p>
					<div>
						When to use %'s:
						<ol>
							<li>When you are using Commands (see above) you use percent signs.<br />
							-- Except when the parameter is OutputVar or InputVar.</li>
							<li>When you are assigning a variable to a value using a traditional mode (an equal sign with no symbol in front of it).</li>
						</ol>

						When <b>not</b> to use %'s:
						<ol>
							<li>In parameters that are input or output variables, For example: <code>StringLen, <span style="color:red">OutputVar</span>, <span style="color:red">InputVar</span></code></li>
							<li>On the left side of an assignment: <code><span style="color:red">Var</span> = 123abc</code></li>
							<li>On the left side of traditional (non-expression) if-statements: <code>If <span style="color:red">Var1</span> &lt; %Var2%</code></li>
							<li>Everywhere in expressions. For example:
<pre>
If (<span style="color:red">Var1</span> != <span style="color:red">Var2</span>)
   <span style="color:red">Var1</span> := <span style="color:red">Var2</span> + 100
</pre>
							</li>
						</ol>
					</div>



					<h3 id="s62">b. Getting user input</h3>
					<div>
						Sometimes you want to have the user to choose the value of stuff. There are several ways of doing this, but the simplest way is <a href="commands/InputBox.htm">Inputbox</a>. Here is a simple example on how to ask the user a couple of questions and doing some stuff with what was entered.

<pre>
InputBox, OutputVar, Question 1, What is your first name?
if (OutputVar="Bill")
   MsgBox, That's is an awesome name, %OutputVar%.

InputBox, OutputVar2, Question 2, Do you like AutoHotkey?
if (OutputVar2="yes")
   MsgBox, Thank you for answering %OutputVar2%`, %OutputVar%! We will become great friends.
else
   MsgBox, %OutputVar%`, That makes me sad.
</pre>
					</div>

					<h3 id="s63">c. other examples?</h3>
					<div>
<pre>
<a href="commands/MsgBox.htm">MsgBox</a>, 4, , Would you like to continue?
<a href="commands/IfMsgBox.htm">IfMsgBox</a>, No
   Return                <em>; If No, stop the code from going further.</em>
MsgBox You pressed YES.  <em>; Otherwise, the user picked yes.</em>
</pre>
<pre>
<em>; Some examples showing when to use percents and when not</em>
Variable=text                      <em>; Assign a variable some text using 'traditional' assignment.</em>
VariableNumber:=6                  <em>; Assign a variable a number using 'expressional' assignment.</em>
Variable2=%Variable%               <em>; Assign a variable to another variable using traditional assignment.</em>
Variable3:=Variable                <em>; Assign a variable to another variable using expressional assignment.</em>
Variable4.=Variable                <em>; Append a variable to the end of another variable using expressional assignment.</em>
Variable5+=VariableNumber          <em>; Add the value of a variable to another variable using expressional assignment.</em>
Variable5-=VariableNumber          <em>; Subtract the value of a variable from another variable using expressional assignment.</em>
Variable6:=SubStr(Variable, 2, 2)  <em>; Variable inside a function. This is always an expression.</em>
Variable7=%Variable% Text          <em>; Assigns a variable to another variable with some extra text using tradition assignment.</em>
Variable8:=Variable " Text"        <em>; Assigns a variable to another variable with some extra text using expressional assignment.</em>
MsgBox, %Variable%                 <em>; Variable inside a command. </em>
StringSplit, Variable, Variable, x <em>; Variable inside a command that uses InputVar and OutputVar.</em>
if (VariableNumber=6)              <em>; Whenever an IF has parenthesis, it'll be an expression. So no %'s.</em>
If (Variable != VariableNumber)    <em>; Whenever an IF has parenthesis, it'll be an expression. So no %'s.</em>
if VariableNumber=6                <em>; Without parenthesis, the if is Traditional. However, only variables on the 'right side' need %'s. </em>
If Var1 &lt; %Var2%                   <em>; Without parenthesis, the if is Traditional. However, only variables on the 'right side' need %'s. </em>
</pre>
					</div>
				<!-- PAGE 6 -->
				<!-- PAGE 6 -->
				<!-- PAGE 6 -->
				</div>
				<div id="objects" class="section">
					<h2 id="s7">7 - Objects</h2>
					<p>
						<a href="Objects.htm">Objects</a> are a way of organizing your data for more efficient usage. Sometimes objects are referred to as arrays, but it's important to note that all arrays are just objects. We call objects different things depending on what we are using them for, but all objects are the same.
					</p>
					<hr />
					An object is basically a collection of variables.
					The variable names are known as "Keys", and the contents of the variables are "Values".<br />
					<br />
					When you hear people calling an object an <i>array</i> or <i>indexed array</i>, it usually means that all the keys are sequential numbers 1 and up.<br />
					When you hear people calling an object an <i>associative array</i>, it means that the keys are either strings (text) or non-sequential numbers.
					Sometimes it's a mix of both, and sequential numbers too!<br />
					<br />
					There are no restrictions to what a key or value can be, and they can even be other arrays!
					<br />
					When the values are arrays too, this is referred to as a <i>nested array</i>, and these will be explained later.
					<hr />
					<div>
						There are a number of reasons you might want to use an object for something. Some examples:<br />
						<ol>
							<li>You want to have a numbered list of things, such as a grocery list (this would be referred to as an indexed array)</li>
							<li>You want to represent a grid, perhaps for a board game (this would be done with nested objects)</li>
							<li>You have a list of things where each thing has a name, such as the characteristics of a fruit (this would be referred to as an associative array)</li>
						</ol>
					</div>
					<h3 id="s71">a. Creating Objects</h3>
					<div>
						There are a few ways to create an object, and the most common ones are listed below<br />
						<ol>
							<li><code>MyObject := ["one", "two", "three", 17]</code><br />
								<div class="indented" >
									Bracket syntax.
									This will start you off with what is sometimes called an "indexed array".
									An indexed array is an object representing a list of items, numbered 1 and up.
									In this example, the value <code>"one"</code> is stored in object key <code>1</code> (aka index 1), and the value <code>17</code> is stored in object key <code>4</code> (aka index 4).
								</div>
							</li>
							<li><code>Banana := {"Shape": "Elongated", "Color": "Yellow", "Taste": "Delicious", "Price": 3}</code><br />
								<div class="indented" >
									Brace syntax.
									This will let you start of by defining what is sometimes called an "associative array".
									An associative array is a collection of data where each item has a name.
									In this example, the value <code>"yellow"</code> is stored in the object key <code>"color"</code>. Also, the value <code>3</code> is stored in the object key <code>"Price"</code>.
								</div>
							</li>
							<li><code>MyObject := Array("one", "two", "three", 17)</code><br />
								<div class="indented" >
									The "array" creation function. This is equivalent to the bracket syntax, but wrapped in a function.
								</div>
							</li>
							<li><code>Banana := Object("Shape", "Elongated", "Color", "Yellow", "Taste", "Delicious", "Price", 3)</code><br />
								<div class="indented" >
									The object creation function. This is equivalent to the brace syntax, but wrapped in a function.
								</div>
							</li>
						</ol>

						It's important to remember that every one of these definitions all create the same thing (objects), just with different keys.

					</div>

					<h3 id="s72">b. Using Objects</h3>
					There are many ways to use objects, including retrieving values, setting values, adding more values, and more.
					<div>
						<br />
						<strong>To set values:</strong>
						<div class="indented">
							Setting values in an object is as simple as setting the value of a variable.<br />
							All you have to do is put your bracket or dot notation (as seen in the retrieval section) on the left side of an expression assignment symbol <code>:=</code>.<br />
							<br />
							For example:<br />
							<code>Banana.Consistency := "Mushy"</code><br />
							<code>Banana["Pickled"] := True <em>; This banana has been pickled. Eww.</em></code>
						</div>
						<br />
						<strong>To retrieve values:</strong>
						<ol>
							<li><code>Value := Banana["Color"]</code><br />
								<div class="indented" >Bracket notation. This allows you to use an expression as the key to get the value from your object.
									In this case, I used the simple expression <code>"Color"</code>, which is (unsurprisingly) the key <code>Color</code>
									You will get a message box with the word "Yellow", because that is what we set the key <code>Color</code> to in the <a href="#s71">previous section</a>.
								</div>
							</li>
							<li><code>Value := Banana.Color</code><br />
								<div class="indented" >
									Dot notation. This only lets you use literal strings for the keys. You cannot use variables in your keys with dot notation.
								</div>
							</li>
						</ol>
						<br />
						<strong>To add new keys and values:</strong>
						<ol>
							<li>Directly adding values
								<div class="indented" >
									To directly add a key and value, just set a key that doesn't exist yet.
									For example:<br />
									<code>MyObject.NewKey := "Shiny"</code><br />
									<code>MyObject["NewerKey"] := 3.1415</code>
								</div>
							</li>
							<li>Inserting values
								<div class="indented" >
									Another way to add keys and values to an object is to use the <code>Insert</code> "method".
									A method is like a function, but it belongs to an object.<br />
									<br />
									The insert method can be called in three ways:<br />
									<br />
									<code>MyObject.Insert(Index, Value1, Value2, Value3...)</code><br />
									If Index/Key is omitted, it defaults to the highest integer key plus one.<br />
									<br />
									<code>MyObject.Insert(Value)</code><br />
									If you specify an integer key, it will shift ALL higher integer keys to the next number up, even if there are gaps (for example, only keys 1 and 100 exist, and you insert a value at key 50, it will shift 100 up to 101)<br />
									<br />
									<code>MyObject.Insert(Key, Value)</code><br />
									If you use an integer key, and have multiple values each additional value would be the index of the previous value plus one. It will shift ALL higher integer keys up by the number of values specified, following the same rules as when you only add a single value.
								</div>
							</li>
						</ol>
						<br />
						<strong>To remove keys and values:</strong>
						<ol>
							<li>Blanking the value out.<br />
								<div class="indented" >
									The simplest way to remove a value is to just blank it out. You can do this by setting it to "", also known as an <i>empty string</i>. This doesn't remove the key, but it will make the value appear identical to an unset value.<br />
									It is possible to tell that the key still exists by using the <code>HasKey</code> method, and it will still come up in a <code>for</code> loop. (for loops will be explained later)
								</div>
							</li>
							<li>Removing the key<br />
								<div class="indented" >
									Another way to remove both the key <i>and</i> value is to remove the key all together. This is done by calling the <code>Remove</code> method. There are a few different ways to use this method, but they all do more or less the same thing.
								</div>
								<ol>
									<li><code>RemovedValue := MyObject.Remove(AnyKey)</code>
										<div class="indented">
											When you use the Remove method like this, it deletes the specified key, and if it's an integer key it then shifts every higher key down by one (similar to how the Insert method shifts keys up by one).<br />
											<br />
											The value it gives will be the contents of the key AnyKey
										</div>
									</li>
									<li><code>NumberOfRemovedKeys := MyObject.Remove(FirstKey, LastKey)</code>
										<div class="indented">
											Using the remove method in this way allows you to remove a range of numbered/integer keys between FirstKey and LastKey. After removing the keys it takes all higher numbered/integer keys and moves them down to fill the gap, so that the key just above LastKey is now FirstKey. This is similar to how the Insert method with multiple specified values works.<br />
											<br />
											The value it gives will be the number of keys that were removed, which is useful if you have a gap between your keys (eg, you specify keys 1 through four, but key number 2 doesn't exist, this will set NumberOfRemovedKeys to 3 as only three keys were there to be removed)
										</div>
									</li>
									<li><code>MyObject.Remove()</code>
										<div class="indented">
											This removes the highest integer key, and returns the value. There are no keys higher than it to be affected.
										</div>
									</li>
									<li><code>MyObject.Remove(AnyKey, "")</code>
										<div class="indented">
											By using the FirstKey LastKey syntax with "" as the LastKey, you can delete an integer key without having all the other keys shift down one. This can be very helpful if you want to treat your object as an associative array with numeric keys instead of an indexed array.
										</div>
									</li>
								</ol>
							</li>
						</ol>
					</div>

					<!-- PAGE 7 -->
					<!-- PAGE 7 -->
					<!-- PAGE 7 -->
				</div>
				<div id="helpful_goodies" class="section">
					<h2 id="s8">8 - Other helpful goodies</h2>
					<p>
						We have reached the end of our journey, my good friend. I hope you have learned something.
						But before we go, here are some other things that I think you should know. Enjoy!
					</p>
					<h3 id="s81">a. The mysterious []'s</h3>
					<div>
						Throughout the documentation, you will see these two symbols (<b>[</b> and <b>]</b>) surrounding code in the yellow syntax box at the top of almost all pages. Anything inside of these brackets are <b><i>OPTIONAL</i></b>. Meaning the stuff inside can be left out if you don't need them. When writing your code, it is very important to <b>NOT</b> type the []'s in your code.<br /><br />
						On the <a href="commands/ControlGetText.htm">ControlGetText</a> page you will see this (without the colors):<br />
						<code>ControlGetText, OutputVar <span style="color:red"><b>[</b></span><span style="color:navy">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span><span style="color:red"><b>]</b></span></code><br /><br />
						So you could simply do this if you wanted:<br />
						<code>ControlGetText, OutputVar</code><br /><br />

						Or add in some more details:<br />
						<code>ControlGetText, OutputVar, Control, WinTitle</code><br /><br />

						What if you wanted to use ExcludeTitle but not fill in WinText or WinTitle? Simple!<br />
						<code>ControlGetText, OutputVar, Control,,, ExcludeTitle</code><br /><br />
						<p class="Note">
							Please note that you cannot IGNORE parameters, you can however leave them blank.<br />
							If you were to Ignore "WinTitle, WinText", it would look like this and cause issues:<br />
							<code>ControlGetText, OutputVar, Control, ExcludeTitle</code><br />
							This is valid.<br />
							<code>ControlGetText, OutputVar, Control,,, ExcludeTitle</code>
						</p>
					</div>
					<h3 id="s82">b. Finding your AHK version</h3>
					<div>
						Run this code to see your AHK version:
<pre>
MsgBox, %A_AHKVersion%
</pre>

						Or look for "AutoHotkey Help File" or "AutoHotkey.chm" in the start menu or your installation directory.
					</div>

					<h3 id="s83">c. Trial and Error</h3>
					<p>
						Trial and Error is a very common and effective way of learning. Instead of asking for help on every little thing, sometimes spending some time alone (sometimes hours or days) and trying to get something to work will help you learn faster.
					</p>
					<p>
						If you try something and it gives you an error, study that error. Then try to fix your code. Then try running it again. If you still get an error, modify your code some more. Keep trying and failing until your code fails no more. You will learn a lot this way by reading the documentation, reading errors and learning what works and what doesn't.
						<span class="InlineCode">Try, fail, try, fail, try, try, try, fail, fail, <b>succeed!</b></span>
					</p>
					<p>
						This is how a lot of "pros" have learned. But don't be afraid to ask for help, we don't bite (hard).
						Learning takes time, the "pros" you encounter did not learn to be masters in just a few hours or days.
					</p>
					<p class="Note">"If at first you don't succeed, try, try, try again." - Hickson, William E.</p>
					<h3 id="s84">d. Indentation</h3>
					<div>
						This stuff (indentation) is very important! Your code will run perfectly fine without it, but it will be a major headache for you and other to read your code. Small code (25 lines or less) will probably be fine to read without indentation, but it'll soon get sloppy. It's best you learn to indent ASAP.<br />
						Indentation has no set style, but it's best to keep everything consistent.<br />
						"<b>What is indentation?</b>" you ask? It's simply spacing to break up your code so you can see what belongs to what. People usually use 3 or 4 spaces or 1 tab per "level".<br /><br />
						No indents:

<pre>
if (car="old")
{
msgbox, the car is really old
if (wheels="flat")
{
msgbox, this car is not safe to drive.
Return
}
else
{
msgbox, Be careful! This old car will be dangerous to drive.
}
}
else
{
msgbox, My`, what a shiny new vehicle you have there.
}
</pre>

						Indented:

<pre>
if (car="old")
{
   msgbox, the car is really old
   if (wheels="flat")
   {
      msgbox, this car is not safe to drive.
      Return
   }
   else
   {
      msgbox, Be careful! This old car will be dangerous to drive.
   }
}
else
{
   msgbox, My`, what a shiny new vehicle you have there.
}
</pre>
						Wiki has various styles and examples. Choose what you like or learn to indent how you think it's easiest to read.<br />
						<a href="http://en.wikipedia.org/wiki/Indent_style">http://en.wikipedia.org/wiki/Indent_style</a>
					</div>

					<h3 id="s85">e. Asking for Help</h3>
					Before you ask, try doing some research yourself or try to code it yourself. If that did not yield results that satisfy you, read below.
					<ul>
						<li>Don't be afraid to ask for help, even the smartest people ask others for help.</li>
						<li>Don't be afraid to show what you tried, even if you think it's silly.</li>
						<li>Post anything you have tried.</li>
						<li>Pretend <i>everyone but you</i> is a doorknob and knows nothing. Give as much information as you can to educate us doorknobs at what you are trying to do. Help us help you.</li>
						<li>Be patient.</li>
						<li>Be polite.</li>
						<li>Be open.</li>
						<li>Be kind.</li>
						<li>Enjoy</li>
					</ul>

					If you don't get an answer right away, wait at least 1 day (24 hours) before asking for more help. We love to help, but we also do this for free on our own time. We might be at work, sleeping, gaming, with family or just too busy to help.<br />
					And while you wait for help, you can try learning and doing it yourself. It's a good feeling, making something yourself without help.

					<h3 id="s86">f. Other links</h3>
					<p>
						<a href="FAQ.htm">Frequently Asked Questions (FAQ)</a>
					</p>
				</div>
			</div>
		</div>
	</body>
</html>
