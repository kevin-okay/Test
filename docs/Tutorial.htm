<!DOCTYPE HTML><html lang="en">
	<head>
		<meta charset="GB2312" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<!--Tutorial by tidbit, from http://ahkscript.github.io/AHK_Tutorial/
				Modified to fit with the AutoHotkey documentation.-->
		<meta name="author" content="tidbit" />
		<meta name="description" content="An AutoHotKey tutorial written by tidbit"/>
		<meta name="keywords" content="ahk, autohotkey, tutorial, beginners guide"/>
		<title>AutoHotkey 初学者向导</title>
		<link href="static/theme.css" rel="stylesheet" type="text/css" />
		<script src="static/content.js" type="text/javascript"></script>
		<style type="text/css">
		.key
		{
			background-color: #f7f7f7;
			border: 1px solid #ccc;
			border-radius: 3px;
			box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 0 0 2px #fff inset;
			color: #333;
			display: inline-block;
			font-size: 90%;
			line-height: 1.4;
			margin: 0 0.1em;
			padding: 0.1em 0.5em;
			text-shadow: 0 1px 0 #fff;
			white-space: nowrap;
		}
		.indented {
			text-indent: 1.5em;
			margin-bottom: 1em;
		}
		</style>
	</head>
	<body>
		<div class="page">
			<h1>AutoHotkey 初学者向导<span style="opacity:0.4"> by tidbit</span></h1>
			<div id="toc" class="section">
				<h3>目录表</h3>
				<ol>
					<li><a href="#s1" class="toci">基础</a>
						<ol>
							<li><a href="#s11" class="toci">下载 AutoHotkey</a></li>
							<li><a href="#s12" class="toci">如何创建一个脚本</a></li>
							<li><a href="#s13" class="toci">你不能合并命令</a></li>
							<li><a href="#s14" class="toci">其它基本信息</a></li>
						</ol>
					</li>
					<li><a href="#s2" class="toci">快捷键 与 热字串</a>
						<ol>
							<li><a href="#s21" class="toci">按键 与 符号</a></li>
							<li><a href="#s22" class="toci">Win键(徽标键)</a></li>
							<li><a href="#s23" class="toci">一个脚本里使用多个热键/热字串</a></li>
							<li><a href="#s24" class="toci">示例</a></li>
						</ol>
					</li>
					<li><a href="#s3" class="toci">发送按键动作</a>
						<ol>
							<li><a href="#s31" class="toci">游戏</a></li>
						</ol>
					</li>
					<li><a href="#s4" class="toci">运行程序与网站(网页)</a></li>
					<li><a href="#s5" class="toci">命令与函数对比</a>
						<ol>
							<li><a href="#s51" class="toci">代码块</a></li>
						</ol>
					</li>
					<li><a href="#s6" class="toci">变量</a>
						<ol>
							<li><a href="#s61" class="toci">什么时候使用百分号</a></li>
							<li><a href="#s62" class="toci">获取用户输入</a></li>
							<li><a href="#s63" class="toci">其它示例</a></li>
						</ol>
					</li>
					<li><a href="#s7" class="toci">对象</a>
						<ol>
							<li><a href="#s71" class="toci">创建对象</a></li>
							<li><a href="#s72" class="toci">使用对象</a></li>
						</ol>
					</li>
					<li><a href="#s8" class="toci">其它有用的东西</a>
						<ol>
							<li><a href="#s81" class="toci">神秘的 [ ]</a></li>
							<li><a href="#s82" class="toci">查找你的AHK版本</a></li>
							<li><a href="#s83" class="toci">尝试与错误</a></li>
							<li><a href="#s84" class="toci">缩进</a></li>
							<li><a href="#s85" class="toci">寻求帮助</a></li>
							<li><a href="#s86" class="toci">其它链接</a></li>
						</ol>
					</li>
				</ol>
			</div>
			<div id="bodyContent">
				<div id="basics" class="section">
					<h2 id="s1">1 - 基础</h2>
					<p class="note">
						在我们开始我们的旅程之前,让我给你一些建议吧. 
						在本向导中,你会看到大量的文字和大量代码. 
						为了更有效的学习,
						建议你阅读这些文字并<b>尝试</b>这些代码.
						然后再深入学习这些代码.
						<br />你可以复制并粘贴此页上的大多数示例.
						<br />如果你弄糊涂了,试着再看一遍.
					</p>

					<h3 id="s11">a. 下载并安装AutoHotkey</h3>

					<script type="text/javascript">
					if ('file:mk:ms-its:'.indexOf(location.protocol) != -1)
						document.write('<p class="note">' + translate.tutLocalMessage + '</p>');
					</script>
					<p>
						在学习使用 AutoHotkey (AHK) 之前, 你需要下载它.
						下载后,你可能会需要安装它.
						但这取决于你下载的版本.
						对于本指南,我们将使用安装版,因为对于新手来说,它最容易设置.
					</p>


					<h3>文字说明:</h3>
					<ol>
						<li>访问AutoHotkey主页.
							<a href="https://autohotkey.com/">https://autohotkey.com/</a>
						</li>
						<li>点击下载.
							<a href="https://autohotkey.com/download/ahk-install.exe">https://autohotkey.com/download/ahk-install.exe</a>
						</li>
						<li>
							在安装Autohotkey过程中,需要你选择安装UNICODE或者ANSI版本.
							你很可能需要UNICODE版本,
							简单点说,
							如果你想要它支持非英文字符和数字,那就选择UNICODE版.
							版本选择之后,一直点下一步直到你看到安装(Install)按钮.
						</li>
						<li>装完了?棒极了!我们接着往下看.</li>
					</ol>
					<p class="note">视频介绍:<br />
						Frankie的 "Install and Hello World"<br />
						<a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>
					</p>

					<h3 id="s12">b. 如何创建一个脚本</h3>
					<p>
						装完Autohotkey后,你也许会想它能做些什么.
						AutoHotkey不是魔法,虽然我也想.
						所以需要我们告诉它要去干什么.
						而这个过程叫做 "写脚本".
					</p>

					<h3>文字说明:</h3>
					<ul>
						<li>1. 右键点桌面空白处.</li>
						<li>2. 点击"新建"菜单.</li>
						<li>3. 点击里面的"AutoHotkey Script"新建一个脚本.</li>
						<li>4. 给脚本命名. 备注: 文件名必须带.ahk后缀,例如MyScript.ahk</li>
						<li>5. 找到刚刚新建的脚本并右键点击它.</li>
						<li>6. 点击"Edit Script".</li>
						<li>7. 一个新窗口被弹出,也许是记事本. 如果是这样就成功了!
						<hr />
						<p>
							现在你已经创建了一个脚本, 
							我们需要加点内容到脚本中. 
							如果需要用到内置命令,函数和变量,
							请查看 <a href="#s5">第5节</a>.<br />
						</p>
						<p>
							这是一个使用<a href="commands/Send.htm">Send</a>命令创建的一个包含热键的简单脚本,当你按下热键后,它会向窗口发送一段文字.
						</p>

<pre>
^j::
   Send, My First Script
Return
</pre>
						<p>
							稍后我们将进行更深入的研究.
							在此之前,我们先解释一下上面的代码.<br />

							- 第一行. <code>^j::</code>  
							是热键. <code>^</code> 代表 
							<span class="key">CTRL</span>, 
							<code>j</code> 是字母 
							<span class="key">j</span>. 它在
							<code>::</code> <b>左边</b> 表示你将按下这个热键.<br />

							- 第二行. <code>Send, My First Script</code> 表示如何发送按键. <code>SEND</code> 是命令, 在逗号(,)之后的内容将会被发送.<br />

							- 第三行. <code>Return</code>. Return将会成为你最好的朋友. 它将停止执行之后的代码.当你的脚本包含越来越多的东西时,使用Return会避免很多问题.
						</p>
						<hr />
						<li>8. 保存文件.</li>
						<li>9. 双击桌面上的文件来运行它, 打开记事本或者其它可以输入文字的地方然后按下<span class="key">Ctrl</span>+<span class="key">J</span>.</li>
						<li>10. 太好了!你的第一个脚本完成了. 给自己一些奖励,然后返回阅读本教程的其余部分.</li>
					</ul>

					<p class="note">
						视频介绍:<br />
						Frankie'的"Install and Hello World"<br /><a href="http://www.autohotkey.com/forum/viewtopic.php?t=77674">http://www.autohotkey.com/forum/viewtopic.php?t=77674</a>

					</p>
					<h3 id="s13">c. 不要合并命令</h3>
					<p>
						当你在写代码的时候, 你可能有强烈的冲动想在同一行放下几个命令,
						或者在一个命令中嵌套多个命令,千万不要这样做.
						在<a href="#s5">第5节</a>
						我们将会告诉你为什么不要这么做,
						同时,我们还将告诉你应该怎么做.
					</p>

					<h3 id="s14">d. 其它基本信息</h3>
					<div>
						如何在你的计算机上找到帮助文件:<br />
						有几种方法可以做到这一点,假设你已将AutoHotkey安装到默认位置.<br /><br />
						方案1:
						<ol>
							<li>找到开始菜单或屏幕上的开始按钮,通常在左下角.</li>
							<li>点击<b>程序</b>或者<b>所有程序</b>.</li>
							<li>在列表中查找<b>AutoHotkey</b>.</li>
							<li>你会看到<b>AutoHotkey Help File</b>. 点击它.</li>
							<li>完成!</li>
						</ol>
						方案2:
						<ol>
							<li>去你的桌面.</li>
							<li>找到<b>我的电脑</b>或者<b>计算机</b>. 然后打开它.</li>
							<li>进入安装<b>AutoHotkey</b>的硬盘. 可能是<b>C:\</b>盘.</li>
							<li>在<b>Program Files</b>文件夹里找到<b>AutoHotkey</b>.</li>
							<li>查找<b>AutoHotkey.chm</b> 或者找一个名叫Autohotkey并带有黄色问号图标的文件.</li>
							<li>完成!</li>
						</ol>
					</div>
					<p class="note">
						其它链接:<br />
						<a href="https://autohotkey.com/docs/">文档</a><br />
						<a href="https://autohotkey.com/docs/commands/">命令列表</a><br />
						<a href="https://autohotkey.com/docs/Functions.htm#BuiltIn">函数</a><br />
						<a href="https://autohotkey.com/docs/Variables.htm">变量</a>
					</p>
				</div>
				<div id="hotkeys_and_hotstrings" class="section">
					<h2 id="s2">2 - Hotkeys &amp; Hotstrings</h2>

					<p>
						什么是热键?热键是一个发热的按键,开个玩笑. 热键是用来触发某些动作的按键或组合按键.<br />
						什么是热字串?热字串主要用于扩展你的缩写库(自动替换). 当然, 它也可以用来映射任何脚本动作.
					</p>

					<p>这是一个热键:</p>

<pre>
^j::
   Send, My First Script
Return
</pre>

					<p>这是一个热字串:</p>

<pre>
::ftw::Free the whales
</pre>

					<p>这两个例子的区别在于热键<span class="key">CTRL &amp; J</span>将会触发一个事件而热字串会将你输入的"ftw"转换为"Free the whales".</p>
					<p>
						<i>"那么,该如何创建一个热键?"</i>
						好问题. 热键是通过一对::创建的. 按键名或组合按键名必须在<code>::</code><b>左边</b>. 代码则跟在后面, 以<code>Return</code>结束.<br />
					</p>
					<p class="note">备注: 也有例外情况,但要解释这些例外情况为时尚早, 所以我们不打算在向导页中介绍它.</p>
<pre>
esc::
   MsgBox Escape!!!!
Return
</pre>
					<p>热字串在要触发的文本两边各有一对::. 替换后的文本在第二对::的<b>右边</b>.</p>
					<p>如上所述,热字串也可以启动脚本动作. 和热键一样能干好多事,真棒!</p>
<pre>
::btw::
   MsgBox You typed "btw".
Return
</pre>

					<p>
						有一个好消息是:
						你可以为每一个热键,热字串,标签等
						写上多行的代码.
					</p>

<pre>
^j::
   MsgBox Wow!
   MsgBox this is
   Run, Notepad.exe
   winactivate, Untitled - Notepad
   WinWaitActive, Untitled - Notepad
   send, 7 lines{!}{enter}
   sendinput, inside the ctrl{+}j hotkey
Return
</pre>

					<h3 id="s21">a. 键和神秘符号</h3>

					<div>
						你可能会问<i>"我怎么知道^代表CTRL?!"</i>. 好问题!为了帮助你学习^和其它符号的意思,注意看这个表:<br />
						<table class="info">
							<tr><th>符号</th><th>描述</th></tr>
							<tr><td><strong>#</strong></td><td>Win(Windows徽标键)</td></tr>
							<tr><td><strong>!</strong></td><td>Alt</td></tr>
							<tr><td><strong>^</strong></td><td>Control</td></tr>
							<tr><td><strong>+</strong></td><td>Shift</td></tr>
							<tr>
								<td>
									<strong>&amp;</strong>
								</td>
								<td>
									用于连接两个按键(含鼠标按键)
									合并成一个自定义热键.
								</td>
							</tr>
						</table>
						<p>
							<strong>
								(想要获悉更详细的符号列表, 查看<a href="Hotkeys.htm">热键页</a>)
							</strong>
						</p>
					</div>
					<p>
						此外,这里有一个常用的按键列表:<br /><a href="KeyList.htm">按键列表</a>
					</p>
					<p>
						你可以通过在两个按键(除手柄键)之间
						使用 <b>&amp;</b> 来定义一个组合热键.
						在下面的例子中,你要按下
						<span class="key">Numpad0</span>, 再按下第二个键, 
						才能触发这个热键:
					</p>

<pre>
Numpad0 &amp; Numpad1::
   MsgBox You pressed Numpad1 while holding down Numpad0.
Return

Numpad0 &amp; Numpad2::
	Run Notepad
Return
</pre>

					<p>
						如果你想知道热字串有没有什么酷酷的修饰符,答案是有!<br />
						热字串的修饰符在第一对::之间,例如:
					</p>

<pre>
:*:ftw::Free the whales
</pre>

					<p class="note">
						想要看更多关于热键和热字串修饰符的信息和实例, 请访问:<br />
						<a href="Hotkeys.htm">热键</a><br />
						<a href="Hotstrings.htm">热字串</a>
					</p>
					<h3 id="s22">b. 窗口特殊热键/热字串</h3>

					<p>有时候你也许想要热键或热字串只在某些特定窗口上工作(或禁用).你可以使用#指令.</p>
					<p>#IfWinActive<br />
					#IfWinExist</p>
					<p>
						这些特殊的命令(技术上称为"指令")可以创建对上下文敏感的热键和热字串. 只需指定一个窗口标题. 但在某些情况下,你可能需要指定一个窗口句柄,组,或类. 如果想深入了解这些高级内容,点这里:<a href="commands/_IfWinActive.htm">#IfWinActive</a>.
					</p>
<pre>
#IfWinActive Untitled - Notepad
#space::
   MsgBox You pressed Win+Spacebar in Notepad.
Return
#IfWinActive
</pre>
					<p>想要关闭上下文敏感,需要将#ifwin的所有参数设置成空. 例如:</p>
<pre>
<em>; Notepad</em>
#IfWinActive untitled - Notepad
!q::
   MsgBox, You pressed Alt and Q in Notepad.
Return
#IfWinActive

<em>; Any window that isn't Untitled - Notepad</em>
!q::
   MsgBox, You pressed Alt and Q in any window.
Return
</pre>
					<p>当#ifwin命令关闭(或在脚本中从未使用过),
					所有的热键和热字串对所有窗口生效.</p><br />
					<p>当#ifwin命令开启: 它将影响脚本中#ifwin之间的热键和热字串.</p>

<pre>
<em>; Notepad</em>
#IfWinActive ahk_class Notepad
#space::
   MsgBox, You pressed Win+Spacebar in Notepad.
Return
::msg::You typed msg in Notepad
#IfWinActive

<em>; MSPaint</em>
#IfWinActive untitled - Paint
#space::
   MsgBox, You pressed Win+Spacebar in MSPaint!
Return
::msg::You typed msg in MSPaint!
#IfWinActive
</pre>
					<p class="note">想要了解更多信息以及相似的命令,
					查看:<br />
					<a href="commands/_IfWinActive.htm">#IfWinActive</a></p>
					<h3 id="s23">c. 一个文件包含多个热键/热字串</h3>			   
					<p>为了满足一些人的特殊想法,
					我在这里声明一下:AutoHotkey支持将
					<i>任意多</i> 的热键和热字串放在一个文件中 
					不管是1个,还是3253个(或者更多).</p>
<pre>
#i::
   run, http://www.google.com/
Return

^p::
   run, notepad.exe
Return

~j::
   send, ack
Return

:*:acheiv::achiev
::achievment::achievement
::acquaintence::acquaintance
:*:adquir::acquir
::aquisition::acquisition
:*:agravat::aggravat
:*:allign::align
::ameria::America
</pre>

					<p>上面的代码是完全可以接受的. 多个热键,多个热字串,都包含在一个大的脚本文件里.</p>


					<h3 id="s24">d. Examples</h3>
<pre>::btw::By the way                          <em>; 替换"btw"为"By the way", 当你按下<a href="commands/_Hotstring.htm">结束符</a>的时候.</em>
:*:btw::By the way                         <em>; 替换"btw"为"By the way"而不需要按下结束符.</em>

^n::                                       <em>; Ctrl &amp; n 热键.</em>
   run, notepad.exe                        <em>; 当你按下Ctrl &amp; n, 将启动记事本.</em>
Return                                     <em>; 热键内容结束,这之后的内容将不会触发.</em>

^b::                                       <em>; Ctrl &amp; b 热键</em>
   send, {ctrl down}c{ctrl up}             <em>; 复制选定的文本. 也可以使用^c, 但这种方法更加可靠.</em>
   SendInput, [b]{ctrl down}v{ctrl up}[/b] <em>; 粘贴所复制的文本,并在文本前后加上加粗标签.</em>
Return                                     <em>; 热键内容结束,这之后的内容将不会触发.</em>
</pre>

					<!-- PAGE 2 -->
					<!-- PAGE 2 -->
					<!-- PAGE 2 -->
				</div>
				<div id="sending_keystrokes" class="section">
					<h2 id="s3">3 - 发送按键</h2>
					<p>
						现在你决定发送一些按键到一个程序中.
						你可以使用 <a href="commands/Send.htm">Send</a> 命令. Send 表示发送按键,模拟打字或按键操作.<br /><br />
						在我们准备使用Send之前, 
						还有一些常见问题要注意:<br />
						就像其它热键一样,Send也有一些特殊键. <a href="commands/Send.htm">Send的更多特殊键.</a><br />
						下面列出4个最常见的特殊键:
					</p>
					<div>
						<hr />
						<p><span class="red">!</span>: 发送ALT键击. 例如, <em>Send This is text!a</em> 将发送按键序列 "This is text" 并接着按下 ALT+a. <strong>注</strong>: 在某些程序中!A 和 !a会产生不同的效果. 这是因为 !A 表示按下 ALT+SHIFT+A 而 !a 表示按下 ALT+a. 如果不确定, 请使用小写字母.</p><p><span class="red">+</span>: 发送SHIFT键击. 例如,<em>Send +abC </em>会发送文本 "AbC",而 <em>Send !+a</em> 会按下 ALT+SHIFT+a.</p><p><span class="red">^</span>: 发送 CONTROL (Ctrl) 键击. 例如, <em>Send ^!a</em> 会按下 CTRL+ALT+a, 而 <em>Send ^{Home}</em> 则发送 CONTROL+HOME. <strong>注</strong>: 在某些程序中 ^A 和 ^a 会产生不同的效果. 这是由于 ^A 按了 CONTROL+SHIFT+A 而 ^a 按了 CONTROL+a. 如果不确定, 请使用小写字母.</p><p><span class="red">#</span>: 发送 WIN 键击,因此 <em>Send #e</em> 会在按住 Windows 键时按下字母 "e".</p>
					</div>
					<p><i><strong>下面一些章节主要介绍可以发送的特殊按键列表,更多详细信息可以查看 <a href="commands/Send.htm">send页</a>上的特殊按键列表.</strong><br /></i></p>
					<p class="note">
						注:<br />这个表<b>并不</b>适用于<a href="Hotkeys.htm">热键</a>. 也就是说,当你使用 <span class="key">CTRL</span> 或 <span class="key">ENTER</span> (或其它按键) 时,不要使用 {}.
					</p><br />

					<div>
						下面一个例子展示了创建一个热键时的错误做法:
<pre>
<em>; 当你创建热键时...
; 以下是错误的脚本</em>
{LCtrl}::
   send, AutoHotkey
Return

<em>; 以下是正确的脚本</em>
LCtrl::
   send, AutoHotkey
Return
</pre>
					</div>
					<hr />
					<div>
						<p>上面提到的大表展示了几乎所有AHK内置的特殊按键. 比如: <code>{enter}</code> 和 <code>{space}</code>.<br />
						有人常常认为文档中用花括号仅仅是为了好玩. 而实际上<b>花括号是必须的</b>. 它将告诉AutoHotkey <code>{!}</code> 表示 "感叹号" ,而不是要 "发送 <span class="key">Alt</span> 键击". 所以要仔细查看<a href="commands/Send.htm">send</a> 页上的特殊按键列表,确保在合适的地方加上花括号.</p>
<pre>
<em>; 注意{}中的!? 这是因为,如果没有{}, AHK 将
; 发送 ALT 键击.</em>
send, This text has been typed{!}
</pre>

<pre>
<em>; 跟上面的例子类似. AHK 将会打印单词 "enter" ...
; ... 如果enter没有加上{}的话.</em>
send, Multiple enter lines have enter been sent. <em>; 错误</em>
send, Multiple{enter}lines have{enter}been sent. <em>; 正确</em>
</pre>
						<div>
							另一个常见的错误是,人们认为当使用send命令时,<b>所有内容</b>都需要
							加上花括号. 这种想法是不对的.  
							如果不在特殊按键列表中,没必要加花括号. 你<b>不</b>
							需要给普通字符,数字加上括号,甚至像.(句点)这些符号也不需要加
							{}.<br /> 
							而且,当你在使用 Send 命令时,
							你可以一次性发送多个字符,数字或符号,
							没必要为每一个字符写上一条 Send 命令.

<pre>
<em>; 不要在普通单词或普通字母上加上花括号.</em>
send, {a}       <em>; 错误</em>
send, {b}       <em>; 错误</em>
send, {c}       <em>; 错误</em>
send, {a}{b}{c} <em>; 错误</em>
send, {abc}     <em>; 错误</em>
send, abc       <em>; 正确</em>
</pre>
						</div>
						<div>
							想要表示按住或松开某个按键, 可以将这个键用花括号围起来,同时加上 UP 或 DOWN.

<pre>
<em>; 下面这个例子表示按下一个键的时候再按下另一个键(或多个键).
; 如果其中一个方法不奏效,试试另外的方法.</em>
send, ^s                     <em>; 都表示发送 CTRL+s 键击</em>
send, {ctrl down}s{ctrl up}  <em>; 都表示发送 CTRL+s 键击</em>
Send, {ctrl down}c{ctrl up}
Send, {b down}{b up}
Send, {TAB down}{TAB up}
Send, {Up down}  <em>; 按下向上键.</em>
Sleep, 1000      <em>; 保持1秒.</em>
Send, {Up up}    <em>; 然后松开向上键.</em>
</pre>
						</div>
					</div>
					<div>
							现在你可能会想 
							<i>"怎样才能让我在发送超长文本时保证文本的可读性?"</i>
							很简单. 只需要把超长文本分割成一系列短行. 具体的做法是: 
							在send后面增加一个新行,这个新行只包含一个左圆括号,然后你可以分多行写下要发送的内容. 
							最后另起一行,用右圆括号结束. 想了解更多信息,请查看 
							<a href="Scripts.htm#continuation">Continuation页</a>.
<pre>
send,
(
Line 1
Line 2
Apples are a fruit.
)
</pre>

					</div>
					<p class="note">
						备注: Send命令有多种形式. 每种形式有其特性. 如果一种形式的send命令不能满足你的需要,可以试试另一种形式. 只需要将 "send" 命令替换成 "sendPlay" 或其它形式.<br />
						下面列出了一些常见的发送文本的命令:<br />
						Send<br />
						SendRaw<br />
						SendInput<br />
						SendPlay<br />
						SendEvent<br />
						想要了解每一个命令的详细内容, <a href="commands/Send.htm">请点这里</a>.
					</p>
					<h3 id="s31">a. 游戏 </h3>
					<p>
						<b><span style="color:red;">非常重要!</span></b><br />
						很多游戏,尤其是新出的游戏,都有反作弊系统,例如 
						GameGuard, Hackshield, PunkBuster等. 
						如果一个游戏的反作弊系统导致你的热键,热字串和send命令统统失效,
						就说明你不太走运.<br />
						且不说绕开反作弊系统是违反游戏规定的,
						绕开反作弊本身也不太容易实现.
						有一些方法也许能提高在某些游戏中使用热键的可能性,
						但<i>没人能打包票一定能行</i> . 所以,尽可能尝试<b>所有</b>
						你能想到的办法,不要轻易放弃.<br />
					</p>

					<p>
						还有一个关于DirectX的问题要注意. 当你在DirectX游戏中使用AutoHotkey碰到问题时, 
						试试下面这个办法.  
						如果程序允许,尝试用窗口模式运行游戏. 
						这样做能够解决一些DirectX问题.<br />
						当你使用 pixel 或 image 命令时,你可能会碰到更多关于DirectX的问题. 
						画面颜色可能会变成黑色(0x000000),不管你设置的是什么颜色. 
						这是一个非常棘手的问题. 如果程序允许,试试用窗口模式运行程序.
					</p>
					<p>
						没有万能办法能确保 AutoHotkey 能运行在所有程序里. 
					 如果你试了所有的办法还是不行,也许 AutoHotkey 暂时无法满足你的需要.
					</p>
					<div>
						<hr />
						下面这个问题选自<a href="FAQ.htm#games">常见问题</a>页:<br />
						有些游戏专用使用DirectInput模式. 带来的负面影响是它们可能会忽略所有的模拟键盘和鼠标操作. 为了解决这个问题,可以从下面这些方法中选一个来试试(或者同时运用这些方法):
						<ul>
							<li>通过下面3个方法使用 <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>命令: 1) 直接使用SendPlay命令; 2) 用 <a href="commands/SendMode.htm">SendMode</a> 切换到Play模式; 和/或 3) 将<a href="Hotstrings.htm#SendMode">热字串</a>发送键击的选项设置为SP(Sendplay)模式.</li>
							<li>使用 <a href="commands/SetKeyDelay.htm">SetKeyDelay</a> 增加键击延时. 例如:</li>
							<li><code>SetKeyDelay, 0, 50</code></li>
							<li><code>SetKeyDelay, 150, 150, Play</code></li>
							<li>使用 <a href="commands/ControlSend.htm">ControlSend</a> 命令, 在其它Send模式都失效情况下使用,也许它能起作用.</li>
						</ul>
					</div>
					<!-- PAGE 3 -->
					<!-- PAGE 3 -->
					<!-- PAGE 3 -->
				</div>
				<div id="running_programs_and_websites" class="section">
					<h2 id="s4">4 - 运行程序和网页</h2>
					<div>
						想要运行<i>画图,计算器,脚本.ahk</i>等程序或要打开一个文件夹, 你可以使用 <a href="commands/Run.htm">Run</a> 命令. 你还可以用这个命令打开一个网址,比如打开 <a href="https://autohotkey.com/">https://autohotkey.com/</a> . 如果你想打开一个已经安装好的程序,也很简单,就像这样:

<pre>
<em>; 运行一个程序. 注: 大部分的程序可能需要完整路径.</em>
Run, %A_ProgramFiles%\Some_Program\Program.exe

<em>; 打开一个网址</em>
Run, https://autohotkey.com
</pre>
					</div>
					<div>
						还有其它一些高级特性,比如命令行参数和CLSID(Windows类标识符).<br />
						如果你想了解更多有关Run命令的信息,可以点击 <a href="commands/Run.htm">Run 命令页</a>.
						<br />
						下面是一些关于Run命令的示例:
<pre>
<em>; 一些程序并不需要完整路径,如Windows标准程序.</em>
Run, Notepad.exe
Run, MsPaint.exe

<em>; 使用 <a href="Variables.htm#BuiltIn">AHK 内置参数</a></em>来打开"我的文档"
Run, %A_MyDocuments%

<em>; 打开一些网页 </em>
Run, https://autohotkey.com
Run, http://www.google.com
</pre>
						<br />
						<p class="note">想深入了解更多信息和示例,可以点击:<br /><a href="commands/Run.htm">Run 命令页</a>.</p>
					</div>


					<!-- PAGE 4 -->
					<!-- PAGE 4 -->
					<!-- PAGE 4 -->
				</div>
				<div id="commands_vs_functions" class="section">
					<h2 id="s5">5 - 命令和函数</h2>
					<div>
						AutoHotkey 有两个重要的工具供开发者使用:<br />
						命令和函数<br />
						<p class="note">有用的链接:<br />
							所用命令列表: <a href="commands/index.htm">commands/index.htm</a><br />
							所有内置函数列表: <a href="Functions.htm#BuiltIn">Functions.htm#BuiltIn</a></p>
					</div>
					<h3>命令</h3>
					<p>
						你可以通过语法来分辨命令和函数. 命令后面的参数无需使用圆括号,而函数需要使用. 所以命令就像下面这样:<br />
						<code>Command, 参数1, 参数2, 参数3</code><br />

						<br />当你使用命令时,不能将几条命令放在同一行(<a href="commands/IfEqual.htm">ifEqual</a> 除外).<br />
						也不能将一个命令作为参数插入到另一个命令.
					</p>

<pre>
Msgbox, Hello Run, Notepad.exe   <em>; 错误</em>
Msgbox, Hello, Run, Notepad.exe  <em>; 错误</em>

Msgbox, Hello      <em>; 正确</em>
Run, Notepad.exe
</pre>

					跟函数不同的是,命令使用"传统语法". 也就是说: 当你使用<code>参数</code>时, 你需要在参数的前后加上%,比如<code>%variable%</code>. 而文本和数字则不需要加双引号. <code>This is some text</code>. 另外,不像函数,命令的参数不能进行运算.
					<p class="note">
						注:如果确实想要在参数中进行运算,可以使用单个 <code>%</code> 来强制定义一个表达式, 但我们这里将不涉及这些内容.
					</p>
					<h3>函数</h3>
					<div>
						就像上文提到的,函数不同于命令的地方在于函数需要使用圆括号. 一个典型的函数就像下面一样:<br />
						<code>Function(参数1, 参数2, 参数3)</code><br /><br />
						与命令相比,函数有下面几个主要差异:
						<ol>
							<li>
								你可以使用运算.<br />
								-- <code>SubStr(37*12, 1, 2)</code><br />
								-- <code>SubStr(A_Hour-12, 2)</code>
							</li>
							<li>
								参数前后不需要加上百分号.<br />
								-- <code>SubStr(A_Now, 7, 2)</code>
							</li>
							<li>
								函数可以嵌套另一个函数.<br />
								-- <code>SubStr(A_AHKPath, inStr(A_AHKPath, "AutoHotkey"))</code>
							</li>
							<li>
								文本前后需要加上双引号.<br />
								-- <code>SubStr("I'm scripting, awesome!", 16)</code>
							</li>
						</ol>

						函数通常会返回一个值,这一点与命令也不一样. 命令需要设置 <i>OutputVar</i> 参数来保存结果, 而函数不需要. 要将函数的返回值分配给一个变量,只需要这样做:<br />
						<code><span style="color:#ff4400"><b>MyVariable</b></span>:=Function(Parameters)</code>

<pre>
<span style="color:#ff4400"><b>MyVariable</b></span>:=SubStr("I'm scripting, awesome!", 16)
</pre>
					<p class="note">这不是赋值的唯一方法,但这是最常用的. 通过将函数(这个例子中的函数是 <code>SubStr(...)</code>)的内容写在:=右边这种方式,将函数的返回值分配给变量 <code>MyVariable</code>.<br />
					<a href="Functions.htm">函数的更多信息</a></p>
					</div>
					<div>
						简言之:

<pre>
<em>; 这些是命令</em>
Msgbox, This is some text.
StringReplace, Output, Input, AutoHotKey, AutoHotkey, ALL
SendInput, This is awesome{!}{!}{!}

<em>; 这些是函数</em>
SubStr("I'm scripting, awesome!", 16)
FileExist(VariableContainingPath)
Output:=SubStr("I'm scripting, awesome!", 16)
</pre>

					</div>
					<h3 id="s51">a. 代码块</h3>
					<p>
						<a href="commands/Block.htm">代码块</a>就是用一对花括号 (<b>{</b> 和 <b>}</b>) 包围起来的一段代码,AutoHotkey 以此来判断这些代码是一个整体. 代码块经常用于 <i>If</i> 和 <i>Loop</i> 中. 如果不使用花括号,整块代码中只有第一行代码能被执行.<br /><br />
					</p>
					<div>
						下面的代码中,当var等于5时,所有行都会执行.
<pre>
if (var=5)
{
   MsgBox, var equals %var%!!
   Exitapp
}
</pre><br />

						下面的代码中,当var等于5时,才能显示消息框. 但不管var是否等于5,脚本都会终止.

<pre>
if (var=5)
   MsgBox, var equals %var%!!
   Exitapp
</pre><br />

						If后面只有一行与它有关的代码,下面的例子做了一个非常好的代码编写示范. 它实现的功能跟上面的代码一样,但是我将第二行代码进行了缩进排版,这样写让我们很容易就知道这行代码是跟If相关的.

<pre>
if (var=5)
   MsgBox, var equals %var%!!
MsgBox, We are now 'outside' the if. We did not need {}'s since there was only 1 line below it.
</pre>
					</div>
					<!-- PAGE 5 -->
					<!-- PAGE 5 -->
					<!-- PAGE 5 -->
				</div>
				<div id="variables" class="section">
					<h2 id="s6">6 - 变量</h2>
					<p>
						<a href="Variables.htm">变量</a>就好像一个包含信息的便利贴. 它可以用于函数,命令或数学表达式中,充当存储文本,数字,数据的作用. 如果没有变量,程序和脚本将会非常乏味.
					</p>
					<hr />
					<div>
						给变量赋值有很多方法,我们将会讨论最常见的几种方法. 请特别留意等号(=).
						<ol>
							<li><code>variable=text</code><br />
								<div class="indented">这是给变量赋值最简单的方法,也是传统的赋值方法. 只需要在等号后面输入文本就行了.</div>
							</li>
							<li><code>variable=%variable2%</code><br />
								<div class="indented">和上面的方法类似,只是你将一个变量所对应的值赋给了另一个变量.</div>
							</li>
							<li><code>variable:="text"</code><br />
								<div class="indented">这里通过一个表达式给变量赋值,因为  <span style="color:#ff4400"><b>=</b></span> 前面有一个 <span style="color:#ff4400"><b>:</b></span> . 任何文本都须包含在双引号内.</div>
							</li>
							<li><code>variable:=variable2</code><br />
								<div class="indented">如果用表达式的方法赋值,变量不需要使用%.</div>
							</li>
							<li><code>variable:=6+8/3*2-sqrt(9)</code><br />
								<div class="indented">你还可以在表达式中使用运算.</div>
							</li>
						</ol>
						第1条和第2条可以合并,就像:<code>var=%var2% some text %var3%.</code><br />
						第3, 4, 5条也可以合并,就像:<code>var:="The value of 5+ " Variable " is: " 5+Variable</code>
					</div>
					<hr />

					<p class="note">
						我们把(<b>=</b>)前面的符号称为<b>赋值运算符</b>, 一般都是表达式. 例如<code>:=</code> <code>+=</code> <code>-=</code> <code>.=</code> 等等.
					</p>
					<h3 id="s61">a. 什么时候使用百分号</h3>
					<p>
						关于变量一个最常见的问题是什么时候使用百分号(<b>%</b>). 希望下面这些内容能够解决一些困扰.
					</p>
					<div>
						什么时候使用百分号:
						<ol>
							<li>当你使用命令时(见前文),需要使用百分号.<br />
							-- 输入变量和输出变量除外.</li>
							<li>当你使用传统模式(等号前面没有其它符号)给一个变量赋值时,需要使用百分号.</li>
						</ol>

						什么时候<b>不要</b>使用百分号:
						<ol>
							<li>参数中的输入或输出变量,不要使用百分号,例如: <code>StringLen, <span style="color:red">OutputVar</span>, <span style="color:red">InputVar</span></code></li>
							<li>赋值时左边的变量,不要使用百分号,例如: <code><span style="color:red">Var</span> = 123abc</code></li>
							<li>在If语句中,传统赋值方式(不包括表达式)中左边的变量,不要使用百分号: <code>If <span style="color:red">Var1</span> &lt; %Var2%</code></li>
							<li>在表达式中的变量,不要使用百分号:
<pre>
If (<span style="color:red">Var1</span> != <span style="color:red">Var2</span>)
   <span style="color:red">Var1</span> := <span style="color:red">Var2</span> + 100
</pre>
							</li>
						</ol>
					</div>



					<h3 id="s62">b. 获取用户输入</h3>
					<div>
						有时候你想让用户来选择某些值. 这可以有很多种方法,但其中最简单的办法就是使用 <a href="commands/InputBox.htm">Inputbox</a> 命令. 下面的例子展示了如何向用户提出一堆问题并根据用户的输入完成一些事情.

<pre>
InputBox, OutputVar, Question 1, What is your first name?
if (OutputVar="Bill")
   MsgBox, That's is an awesome name, %OutputVar%.

InputBox, OutputVar2, Question 2, Do you like AutoHotkey?
if (OutputVar2="yes")
   MsgBox, Thank you for answering %OutputVar2%`, %OutputVar%! We will become great friends.
else
   MsgBox, %OutputVar%`, That makes me sad.
</pre>
					</div>

					<h3 id="s63">c. 其它示例</h3>
					<div>
<pre>
<a href="commands/MsgBox.htm">MsgBox</a>, 4, , Would you like to continue?
<a href="commands/IfMsgBox.htm">IfMsgBox</a>, No
   Return                <em>; 如果选择No, 脚本将会终止.</em>
MsgBox You pressed YES.  <em>; 用户选择了YES.</em>
</pre>
<pre>
<em>; 下面一些例子展示了什么时候该使用百分号,什么时候不该.</em>
Variable=text                      <em>; 采用"传统"方式将一个文本赋值给一个变量.</em>
VariableNumber:=6                  <em>; 采用"表达式"方式将一个数字赋值给一个变量.</em>
Variable2=%Variable%               <em>; 采用"传统"方式将一个变量的值赋值给一个变量.</em>
Variable3:=Variable                <em>; 采用"表达式"方式将一个变量的值赋值给一个变量.</em>
Variable4.=Variable                <em>; 采用"表达式"方式将一个变量的值添加到另一个变量的后面.</em>
Variable5+=VariableNumber          <em>; 采用"表达式"方式,将两个变量的值相加,然后把结果保存到第一个变量中.</em>
Variable5-=VariableNumber          <em>; 采用"表达式"方式,将第一个变量的值减去第二个变量的,然后把结果保存到第一个变量中.</em>
Variable6:=SubStr(Variable, 2, 2)  <em>; 在函数中的变量. 它们永远都是表达式.</em>
Variable7=%Variable% Text          <em>; 采用"传统"方式,将一个变量的值加上一个文本然后赋值给另一个变量.</em>
Variable8:=Variable " Text"        <em>; 采用"表达式"方式,将一个变量的值加上一个文本然后赋值给另一个变量.</em>
MsgBox, %Variable%                 <em>; 在命令中的变量. </em>
StringSplit, Variable, Variable, x <em>; 在命令中的变量,但是它们作为输入或输出变量.</em>
if (VariableNumber=6)              <em>; 如果IF采用括号的方式,那么括号中的内容就是一个表达式,所以不需要百分号.</em>
If (Variable != VariableNumber)    <em>; 如果IF采用括号的方式,那么括号中的内容就是一个表达式,所以不需要百分号.</em>
if VariableNumber=6                <em>; 如果IF不使用括号,那么IF后面的内容将采用传统方式. 不过,只有赋值语句"右边"的变量需要百分号. </em>
If Var1 &lt; %Var2%                   <em>; 如果IF不使用括号,那么IF后面的内容将采用传统方式. 不过,只有赋值语句"右边"的变量需要百分号. </em>
</pre>
					</div>
				<!-- PAGE 6 -->
				<!-- PAGE 6 -->
				<!-- PAGE 6 -->
				</div>
				<div id="objects" class="section">
					<h2 id="s7">7 - 对象</h2>
					<p>
						<a href="Objects.htm">对象</a>其实是一种更具效率的数据组织方式,它有很多用处. 有时候对象被当作数组,在这重点声明一下所有的数组都是对象. 我们可以根据对象的使用范围区分不同的对象,但这些对象都有同样的特性.
					</p>
					<hr />
					一个对象可以看成是变量的集合.
					变量的名字叫做"键",变量的内容叫做"值".<br />
					<br />
					当你听到人们把一个对象叫做 <i>数组</i> 或 <i>索引数组</i> , 说明这个对象的键是从1开始递增的连续数字.<br />
					当你听到人们把一个对象叫做 <i>关联数组</i> ,说明这个对象的键要么使用字符串 (或文本),要么使用不连续的数字.
					有时可能是两者的混合也有可能是数列!<br />
					<br />
					一个对象的键和值没有什么限制,它们甚至可以是另一个数组!
					<br />
					如果一个对象的值也是数组,我们把它叫做 <i>嵌套数组</i> , 这个我们以后再解释.
					<hr />
					<div>
						有很多地方需要使用数组,比如:<br />
						<ol>
							<li>当你需要描述一组有序列表时,比如杂货店列表(这种情况最好使用索引数组)</li>
							<li>当你需要描述一个图形方格时,比如一个棋盘游戏(这种情况最好使用嵌套对象)</li>
							<li>当你需要描述一组事物而每样事物都有自己的名字时,比如描述水果的特性(这种情况最好使用关联数组)</li>
						</ol>
					</div>
					<h3 id="s71">a. 创建对象</h3>
					<div>
						我们有很多方法可以创建对象,下面介绍最常用的几种方法:<br />
						<ol>
							<li><code>MyObject := ["one", "two", "three", 17]</code><br />
								<div class="indented" >
									采用方括号的形式.
									我们这里介绍所谓的"索引数组"对象.
									索引数组表示这个对象包含一组数据,这些数据的索引号从1开始连续递增.
									在这个例子中,值 <code>"one"</code> 存储在对应键 <code>1</code> (又叫做索引号1), 值 <code>17</code> 存储在对应键 <code>4</code> (又叫做索引号4).
								</div>
							</li>
							<li><code>Banana := {"Shape": "Elongated", "Color": "Yellow", "Taste": "Delicious", "Price": 3}</code><br />
								<div class="indented" >
									采用花括号形式.
									这里介绍所谓的"关联数组"对象.
									关联数组表示这个对象包括一组数据,每个数据都有自己的名字.
									在这个例子中,值 <code>"yellow"</code> 对应键 <code>"color"</code>. 同样的, 值 <code>3</code> 对应键 <code>"Price"</code>.
								</div>
							</li>
							<li><code>MyObject := Array("one", "two", "three", 17)</code><br />
								<div class="indented" >
									采用"数组"创建函数.这种方式跟方括号形式一样,区别仅仅是采用了函数的形式.
								</div>
							</li>
							<li><code>Banana := Object("Shape", "Elongated", "Color", "Yellow", "Taste", "Delicious", "Price", 3)</code><br />
								<div class="indented" >
									采用对象创建函数.这种方式跟花括号形式一样,区别仅仅是采用了函数的形式.
								</div>
							</li>
						</ol>

						请注意,所有这些方法都创建了同一样东西(也就是对象),区别仅仅是对象的键不一样.

					</div>

					<h3 id="s72">b. 使用对象</h3>
					使用对象有很多方式,包括取出对象值,设置对象值,新增值等等.
					<div>
						<br />
						<strong>设置对象值:</strong>
						<div class="indented">
							设置对象的值跟设置变量的值一样简单.<br />
							你需要做的是将方括号或句点表示法(就像下文取对象值部分那样)放在表达式赋值符号<code>:=</code>的左边.<br />
							<br />
							例如:<br />
							<code>Banana.Consistency := "Mushy"</code><br />
							<code>Banana["Pickled"] := True <em>; 这个香蕉烂透了.呃...</em></code>
						</div>
						<br />
						<strong>取出对象值:</strong>
						<ol>
							<li><code>Value := Banana["Color"]</code><br />
								<div class="indented" >方括号表示法. 允许你使用表达式作为键从对象中获取值.
									在这个例子中,我使用表达式 <code>"Color"</code>, 不要惊讶我仅使用键 <code>Color</code> 就会得到一个包含单词 "Yellow" 的值, 因为 "Yellow" 是我们事先 (在<a href="#s71">上一节</a>) 就与键 <code>Color</code> 建立关联的.
								</div>
							</li>
							<li><code>Value := Banana.Color</code><br />
								<div class="indented" >
									句点表示法. 仅允许使用原样的字串作为键名. 在句点表示法中键名不能使用变量.
								</div>
							</li>
						</ol>
						<br />
						<strong>新增键和值:</strong>
						<ol>
							<li>直接新增值
								<div class="indented" >
									想要直接新增一对键和值,只需要设置一个跟现有的键名不一样的新键就行了.
									例如:<br />
									<code>MyObject.NewKey := "Shiny"</code><br />
									<code>MyObject["NewerKey"] := 3.1415</code>
								</div>
							</li>
							<li>插入值
								<div class="indented" >
									其他新增键值到对象的方法是使用以下方法之一.<br />
									<br />
									<code>MyObject.InsertAt(Index, Value1, Value2, Value3...)</code><br />
									<i>Index</i> 为任意整数键. 这样将导致所有较高的整数键的索引增加插入值的数量, 即使是空缺的也一样(例如, 假设只有键 1 和 100 存在, 当插入一个值到第50个键的位置时, 将导致原来位于100的键的索引变成101).<br />
									<br />
									<code>MyObject.Push(Value1, Value2, Value3...)</code><br />
									"追加" 值到 <i>MyObject</i> 数组的尾部. 换句话说, 它将插入的值放在最高整数键加一的位置.<br />
								</div>
							</li>
						</ol>
						<br />
						<strong>移除键和值:</strong>
						<ol>
							<li>用空白填充值.<br />
								<div class="indented" >
									最简单的删除值的方法就是填充为空. 你可以将其赋值为 "" (两个连续的双引号), 也就是常说的 <i>空字符串</i>. 这不会删除键, 但它会将键设为类似从未赋值一样.<br />
									可以通过使用 <code>HasKey</code> 方法得知键依然存在, 而且键也会出现在 <code>for</code> 循环中. (我们一会再解释for循环)
								</div>
							</li>
							<li>移除键<br />
								<div class="indented" >
									有几种同时删除键 <i>和</i> 值的办法,它们是:
								</div>
								<ol>
									<li><code>RemovedValue := MyObject.Delete(AnyKey)</code>
										<div class="indented">
											之前位于<code>MyObject[AnyKey]</code>的值将储存到 <i>RemovedValue</i>.
										</div>
									</li>
									<li><code>NumberOfRemovedKeys := MyObject.Delete(FirstKey, LastKey)</code>
										<div class="indented">
											如果你使用这种形式,将删除一组连续的键和对应的值,范围从FirstKey开始,到LastKey结束.<br />
											<br />
											然后将删除的数量返回给变量NumberOfRemovedKeys. 当键与键之间有空隙,返回值就很有用,因为它可以告诉我们究竟删除了几个键.(比如,你想要删除一组键,从1到4,但其实这一组键中缺少键2,所以你一共只删除了3个键,那么NumberOfRemovedKeys的值就是3)
										</div>
									</li>
									<li><code>MyObject.Pop()</code>
										<div class="indented">
											这种形式将删除最大的整数键,同时返回这个键对应的值. 而且这种形式不会影响其它键的索引顺序.
										</div>
									</li>
									<li><code>RemovedValue := MyObject.RemoveAt(Index)</code><br />
									<code>NumberOfRemovedKeys := MyObject.RemoveAt(Index, Length)</code>
										<div class="indented">
											这样将会移除从 <i>Index</i> 到 <i>Index + Length - 1</i> (包含) 之间的所有键. 如果 <i>Length</i> 省略则默认值为 1 . 移除这些键之后,更高 数字或整数的键将向下填充空缺, 所以,如果有个值位于 <i>Index + Length</i> 那么它现在的位置就是 <i>Index</i>. 这很像 InsertAt 方法操作多个指定值的操作.
										</div>
									</li>
								</ol>
							</li>
						</ol>
					</div>

					<!-- PAGE 7 -->
					<!-- PAGE 7 -->
					<!-- PAGE 7 -->
				</div>
				<div id="helpful_goodies" class="section">
					<h2 id="s8">8 - 其它有用的东西</h2>
					<p>
						亲爱的朋友,当你阅读到这里,说明快要结束我们这段旅程了. 我希望你有所收获.
						最后,我将告诉你一些我认为你可能有用的东西. 希望你过的愉快!
					</p>
					<h3 id="s81">a. 神秘的 [ ]</h3>
					<div>
						在帮助文档中,你可能会发现有两个符号(<b>[</b> 和 <b>]</b>) 经常出现在几乎每一页开头的黄色代码框中. 方括号中的内容代表<b><i>可选的</i></b>.也就是说,如果你不需要这些参数你完全可以不管它. 不过要强调一点,当你在写代码时,千万<b>不要</b>把 [ ] 也写上了.<br /><br />
						例如,在 <a href="commands/ControlGetText.htm">ControlGetText</a> 命令页上,你可能会看到这段代码(请忽略颜色):<br />
						<code>ControlGetText, OutputVar <span style="color:red"><b>[</b></span><span style="color:navy">, Control, WinTitle, WinText, ExcludeTitle, ExcludeText</span><span style="color:red"><b>]</b></span></code><br /><br />
						所以你可以简单的写成这样:<br />
						<code>ControlGetText, OutputVar</code><br /><br />

						或者再加上一些参数:<br />
						<code>ControlGetText, OutputVar, Control, WinTitle</code><br /><br />

						如果你想只使用参数ExcludeTitle而不想使用参数WinText或WinTitle,怎么办? 很简单!<br />
						<code>ControlGetText, OutputVar, Control,,, ExcludeTitle</code><br /><br />
						<p class="Note">
							请注意,你不能忽略参数,只是需要将它们的位置留空.<br />
							如果你像下面这样忽略"WinTitle, WinText",将会产生错误:<br />
							<code>ControlGetText, OutputVar, Control, ExcludeTitle</code><br />
							语句非法.<br />
							<code>ControlGetText, OutputVar, Control,,, ExcludeTitle</code>
						</p>
					</div>
					<h3 id="s82">b. 查找你的AHK版本</h3>
					<div>
						你可以运行下面的程序来获取你的AHK版本信息:
<pre>
MsgBox, %A_AHKVersion%
</pre>

						你也可以到开始菜单或安装路径下的帮助文档里面去找.
					</div>

					<h3 id="s83">c. 尝试与错误</h3>
					<p>
						尝试和错误是非常普遍而高效的学习方法. 与动不动就问这问那相比,有时候花点时间(也许是长年累月)亲手尝试可能会学的更快.
					</p>
					<p>
						如果你在尝试新东西的过程碰到错误,不要紧,就从解决这个错误开始. 尝试解决这个错误,一次不行就两次.多次尝试后还是解决不了,可以打开帮助文件学习哪些能做哪些不能做,然后修改你的代码再试试.
						<span class="InlineCode">试试,失败,试试,失败,试试,试试,再试试,失败,失败,<b>成功!</b></span>
					</p>
					<p>
						这也是很多大师们的学习经历. 不过也不要害怕提问,我们不会咬人(至少不会咬的太狠).
						学习总需要时间慢慢积累,大师也不是一天练成的.
					</p>
					<p class="Note">"如果一开始就碰到失败,就是要不停的尝试,再尝试." - Hickson, William E.</p>
					<h3 id="s84">d. 缩进</h3>
					<div>
						缩进这个事非常重要!你的代码没有它也能正常运行,可是如果没有缩进会让阅读代码变成一件非常痛苦的事.也许一小段代码(少于25行)不用缩进也没有太大关系,但是代码一旦增多,缩进就非常有必要. 所以,学习使用缩进越快越好.<br />
						缩进没有固定的风格,但最好保持一种风格.<br />
						"<b>什么是缩进?</b>" 你可能会问? 简单的说就是在代码和页面边界保留一段距离,这样可以区分这一段代码是属于哪一段代码.有些人习惯使用3,4个空格或1个tab来表示缩进,每一级用一次缩进.<br /><br />
						不用缩进:

<pre>
if (car="old")
{
msgbox, the car is really old
if (wheels="flat")
{
msgbox, this car is not safe to drive.
Return
}
else
{
msgbox, Be careful! This old car will be dangerous to drive.
}
}
else
{
msgbox, My`, what a shiny new vehicle you have there.
}
</pre>

						使用缩进:

<pre>
if (car="old")
{
   msgbox, the car is really old
   if (wheels="flat")
   {
      msgbox, this car is not safe to drive.
      Return
   }
   else
   {
      msgbox, Be careful! This old car will be dangerous to drive.
   }
}
else
{
   msgbox, My`, what a shiny new vehicle you have there.
}
</pre>
						关于缩进,维基百科上有很多风格示例. 建议选一种你喜欢的风格来学习.<br />
						<a href="http://en.wikipedia.org/wiki/Indent_style">http://en.wikipedia.org/wiki/Indent_style</a>
					</div>

					<h3 id="s85">e. 寻求帮助</h3>
					在你提问之前,最好自己先研究一下或者自己先动手试着写代码. 如果自己实在得不到满意的结果,请往下看.
					<ul>
						<li>不要害怕提问,即使是世界上最聪明的人也需要别人的帮助.</li>
						<li>不要害怕给别人看你写的代码,就算你觉得代码有点弱智.</li>
						<li>将所有你尝试的代码都贴出来.</li>
						<li>假设<i>其他人</i> 都是门外汉.把你掌握的所有信息都教给我们这些门外汉. 帮助我们就是帮助你自己.</li>
						<li>保持耐心.</li>
						<li>保持友善.</li>
						<li>保持开放.</li>
						<li>保持友善.</li>
						<li>祝你好运.</li>
					</ul>

					如果没有人回答你的问题,至少等一天再提问. 我们乐于助人,但是我们也是在自己的空余时间里免费提供帮助. 也许我们正在工作,睡觉,游戏或者太忙了.<br />
					在等待帮助时,你也可以试着自己动手解决. 独立解决问题的感觉相当不错.

					<h3 id="s86">f. 其它链接</h3>
					<p>
						<a href="FAQ.htm">常见问题(FAQ)</a>
					</p>
				</div>
			</div>
		</div>
	</body>
</html>
